import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def fix_syntax_error():
    """Corrige el error de sintaxis en la l√≠nea 1285"""
    print("üîß CORRIGIENDO ERROR DE SINTAXIS")
    print("=" * 60)
    
    filepath = 'trajectory_hub/core/motion_components.py'
    
    # Leer el archivo l√≠nea por l√≠nea
    with open(filepath, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    print(f"üìÑ Archivo: {filepath}")
    print(f"   Total l√≠neas: {len(lines)}")
    
    # Buscar la l√≠nea problem√°tica (1285 = √≠ndice 1284)
    if len(lines) > 1284:
        problem_line = lines[1284]
        print(f"\n‚ùå L√≠nea 1285 actual:")
        print(f"   {problem_line.rstrip()}")
        
        # Corregir la l√≠nea
        correct_line = "    def update(self, current_time: float, dt: float, state: 'MotionState') -> 'MotionState':\n"
        lines[1284] = correct_line
        
        print(f"\n‚úÖ L√≠nea 1285 corregida:")
        print(f"   {correct_line.rstrip()}")
        
        # Mostrar contexto
        print(f"\nüìã Contexto (l√≠neas 1283-1287):")
        for i in range(max(0, 1282), min(len(lines), 1287)):
            marker = ">>>" if i == 1284 else "   "
            print(f"{marker} {i+1}: {lines[i].rstrip()}")
    
    # Guardar el archivo
    print(f"\nüíæ Guardando archivo...")
    
    # Backup
    import shutil
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f'{filepath}.backup_{timestamp}'
    shutil.copy(filepath, backup_path)
    print(f"‚úÖ Backup: {backup_path}")
    
    # Guardar
    with open(filepath, 'w', encoding='utf-8') as f:
        f.writelines(lines)
    print("‚úÖ Archivo corregido y guardado")
    
    # Verificar que se puede importar
    print(f"\nüß™ Verificando sintaxis...")
    try:
        import py_compile
        py_compile.compile(filepath, doraise=True)
        print("‚úÖ Sintaxis correcta")
        return True
    except py_compile.PyCompileError as e:
        print(f"‚ùå Todav√≠a hay errores de sintaxis: {e}")
        return False

def test_rotation_after_fix():
    """Test r√°pido despu√©s del fix"""
    print("\n\nüß™ TEST DESPU√âS DEL FIX:")
    print("=" * 60)
    
    try:
        from trajectory_hub.core import EnhancedTrajectoryEngine
        import numpy as np
        
        # Crear sistema
        engine = EnhancedTrajectoryEngine(max_sources=5, fps=60)
        sid = engine.create_source(0)
        engine._positions[0] = np.array([3.0, 0.0, 0.0])
        print("‚úÖ Sistema creado")
        
        # Configurar rotaci√≥n
        success = engine.set_manual_individual_rotation(
            source_id=0,
            yaw=90.0,
            pitch=0.0,
            roll=0.0,
            interpolation_speed=45.0
        )
        print(f"‚úÖ Rotaci√≥n configurada: {success}")
        
        # Verificar valores
        if 0 in engine.motion_states:
            motion = engine.motion_states[0]
            if 'manual_individual_rotation' in motion.active_components:
                comp = motion.active_components['manual_individual_rotation']
                print(f"\nüìä Componente configurado:")
                print(f"   Target yaw: {np.degrees(comp.target_yaw):.1f}¬∞")
                print(f"   Enabled: {comp.enabled}")
                
                # Test update manual
                print(f"\nüîÑ Test update manual:")
                print(f"   Current yaw antes: {np.degrees(comp.current_yaw):.1f}¬∞")
                
                # Llamar update
                state = comp.update(0.0, 0.1, motion.state)
                
                print(f"   Current yaw despu√©s: {np.degrees(comp.current_yaw):.1f}¬∞")
                print(f"   ¬øSe actualiz√≥?: {comp.current_yaw > 0}")
                
                # Test calculate_delta
                delta = comp.calculate_delta(motion.state, 0.1, 0.1)
                if delta:
                    print(f"\nüìê Delta calculado:")
                    print(f"   Position: {delta.position}")
                    print(f"   ¬øEs movimiento?: {not np.allclose(delta.position, 0)}")
        
        print("\n‚úÖ Sistema funcional")
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    if fix_syntax_error():
        test_rotation_after_fix()