# === fix_indentation_line1011.py ===
# ðŸ”§ Fix: Corregir indentaciÃ³n lÃ­nea 1011
# âš¡ INSTANT FIX

import os

# Leer archivo
with open("trajectory_hub/core/motion_components.py", 'r', encoding='utf-8') as f:
    lines = f.readlines()

# Verificar lÃ­nea 1011
if len(lines) > 1010:
    print(f"ðŸ“‹ LÃ­nea 1010: {repr(lines[1009][:60])}")
    print(f"ðŸ“‹ LÃ­nea 1011: {repr(lines[1010][:60])}")
    
    # Si la lÃ­nea 1011 tiene un docstring mal indentado
    if '"""' in lines[1010] and not lines[1010].startswith('        '):
        lines[1010] = '        ' + lines[1010].lstrip()
        print("âœ… IndentaciÃ³n corregida")
        
        # Guardar
        with open("trajectory_hub/core/motion_components.py", 'w', encoding='utf-8') as f:
            f.writelines(lines)

# Ahora arreglar todo el mÃ©todo si es necesario
print("\nðŸ”§ Verificando estructura del mÃ©todo...")

with open("trajectory_hub/core/motion_components.py", 'r', encoding='utf-8') as f:
    content = f.read()

# Buscar el mÃ©todo update_with_deltas mal formateado
import re
pattern = r'def update_with_deltas\(.*?\).*?:\n([ ]*""".*?""")'
match = re.search(pattern, content, re.DOTALL)

if match:
    docstring = match.group(1)
    if not docstring.startswith('        '):
        print("ðŸ”§ Arreglando indentaciÃ³n del mÃ©todo completo...")
        
        # Buscar el mÃ©todo completo
        start = content.find('def update_with_deltas')
        if start > 0:
            # Verificar indentaciÃ³n previa
            prev_line_start = content.rfind('\n', 0, start)
            indent = len(content[prev_line_start+1:start]) - len(content[prev_line_start+1:start].lstrip())
            
            # Buscar el final del mÃ©todo
            next_def = content.find('\n    def ', start + 1)
            next_class = content.find('\nclass ', start + 1)
            end = min(x for x in [next_def, next_class, len(content)] if x > start)
            
            # Extraer mÃ©todo
            method = content[start:end]
            
            # Re-indentar correctamente
            lines = method.split('\n')
            fixed_lines = []
            for line in lines:
                if line.strip():
                    if line.strip().startswith('def '):
                        fixed_lines.append('    ' + line.strip())
                    else:
                        fixed_lines.append('        ' + line.strip())
                else:
                    fixed_lines.append('')
            
            # Reemplazar
            content = content[:start] + '\n'.join(fixed_lines) + content[end:]
            
            # Guardar
            with open("trajectory_hub/core/motion_components.py", 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("âœ… MÃ©todo re-indentado")

print("\nðŸš€ Ejecutando test...")
os.system("python test_rotation_ms_final.py")