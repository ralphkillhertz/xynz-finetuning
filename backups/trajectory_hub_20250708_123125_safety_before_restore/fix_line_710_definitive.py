# === fix_line_710_definitive.py ===
# üîß Fix: Soluci√≥n DEFINITIVA para l√≠nea 710
# ‚ö° Cambiar l√≥gica del 'or'
# üéØ Impacto: CR√çTICO

import shutil
from datetime import datetime

def fix_line_710_definitivo():
    """Arregla definitivamente el error en l√≠nea 710"""
    
    file_path = "trajectory_hub/core/motion_components.py"
    
    # Backup
    backup_name = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy(file_path, backup_name)
    print(f"‚úÖ Backup creado: {backup_name}")
    
    # Leer archivo
    with open(file_path, "r") as f:
        lines = f.readlines()
    
    fixed = False
    
    # Buscar y arreglar la l√≠nea problem√°tica
    for i in range(len(lines)):
        line = lines[i]
        
        # Buscar la l√≠nea exacta con el problema
        if 'self.enabled = (abs(sx) > 0.001) or (abs(sy) > 0.001) or (abs(sz) > 0.001)' in line:
            print(f"\nüîç Encontrado problema en l√≠nea {i+1}:")
            print(f"   Antes: {line.strip()}")
            
            # Reemplazar con l√≥gica que no use 'or'
            indent = line[:len(line) - len(line.lstrip())]
            
            # Nueva l√≥gica sin 'or'
            new_line = f"{indent}self.enabled = any([abs(sx) > 0.001, abs(sy) > 0.001, abs(sz) > 0.001])\n"
            
            lines[i] = new_line
            print(f"   Despu√©s: {new_line.strip()}")
            fixed = True
            break
    
    if not fixed:
        # Buscar patr√≥n alternativo
        print("\nüîç Buscando patr√≥n alternativo...")
        for i in range(700, min(720, len(lines))):
            if i < len(lines):
                line = lines[i]
                if 'self.enabled' in line and ' or ' in line and 'abs(' in line:
                    print(f"\nüìç Encontrado en l√≠nea {i+1}:")
                    print(f"   {line.strip()}")
                    
                    # Si contiene el patr√≥n problem√°tico
                    if '(abs(sx)' in line or '(abs(sy)' in line or '(abs(sz)' in line:
                        indent = line[:len(line) - len(line.lstrip())]
                        new_line = f"{indent}self.enabled = any([abs(sx) > 0.001, abs(sy) > 0.001, abs(sz) > 0.001])\n"
                        lines[i] = new_line
                        print(f"   Cambiado a: {new_line.strip()}")
                        fixed = True
                        break
    
    if fixed:
        # Escribir archivo
        with open(file_path, "w") as f:
            f.writelines(lines)
        
        print("\n‚úÖ Archivo corregido exitosamente")
        print("   Usando any() en lugar de 'or' para evitar problemas con arrays")
    else:
        print("\n‚ùå No se encontr√≥ la l√≠nea problem√°tica")
        
        # Mostrar contexto alrededor de l√≠nea 710
        print("\nüìã Contexto alrededor de l√≠nea 710:")
        for i in range(705, min(715, len(lines))):
            if i < len(lines):
                print(f"   {i+1}: {lines[i].rstrip()}")

if __name__ == "__main__":
    print("üîß Fix DEFINITIVO para error array ambiguous")
    print("=" * 50)
    fix_line_710_definitivo()
    
    print("\nüìù Pr√≥ximo paso:")
    print("   python test_rotation_ms_final.py")