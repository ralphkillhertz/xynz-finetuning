#!/usr/bin/env python3
"""
üîß FIX FINAL - Arreglar engine.update() para que llame a motion.update()
‚ö° El √∫ltimo paso para que todo funcione
"""

import os
import re

def fix_engine_update():
    """Asegurar que engine.update() llame a motion.update() correctamente"""
    
    print("üîß ARREGLANDO ENGINE.UPDATE()\n")
    
    engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"
    
    if not os.path.exists(engine_file):
        print("‚ùå No se encuentra enhanced_trajectory_engine.py")
        return False
    
    # Backup
    import shutil
    backup_file = engine_file + ".backup_update"
    shutil.copy2(engine_file, backup_file)
    
    with open(engine_file, 'r') as f:
        content = f.read()
    
    # 1. Buscar el m√©todo update
    print("1Ô∏è‚É£ BUSCANDO M√âTODO update()...")
    
    update_pattern = r'(def update\(self[^)]*\):\s*\n)(.*?)(?=\n    def|\nclass|\Z)'
    update_match = re.search(update_pattern, content, re.DOTALL)
    
    if not update_match:
        print("‚ùå No se encontr√≥ el m√©todo update")
        return False
    
    method_def = update_match.group(1)
    method_body = update_match.group(2)
    
    print("‚úÖ M√©todo update encontrado")
    
    # 2. Ver si ya llama a motion.update
    if 'motion.update' in method_body or '_source_motions' in method_body:
        print("‚ÑπÔ∏è  Ya menciona motion/source_motions")
        
        # Verificar si realmente est√° llamando update
        if '.update(' not in method_body:
            print("   ‚ùå Pero NO llama a .update()")
    
    # 3. Crear nuevo m√©todo update que funcione
    print("\n2Ô∏è‚É£ CREANDO M√âTODO update() CORRECTO...")
    
    new_update = '''def update(self):
        """Actualizar todas las fuentes y enviar posiciones via OSC"""
        if self.time_paused:
            return
            
        # Calcular dt
        dt = 1.0 / self.fps
        
        # 1. Actualizar cada source motion
        if hasattr(self, '_source_motions'):
            for source_id, motion in self._source_motions.items():
                # Llamar update de cada motion
                motion.update(dt)
        
        # 2. Enviar posiciones via OSC si est√° activo
        if self.osc_bridge and hasattr(self, '_source_motions'):
            for source_id, motion in self._source_motions.items():
                # Obtener la posici√≥n actualizada
                if hasattr(motion, 'get_position'):
                    position = motion.get_position()
                elif hasattr(motion, 'state') and hasattr(motion.state, 'position'):
                    position = motion.state.position
                else:
                    continue
                
                # Enviar via OSC
                self.osc_bridge.send_position(source_id, position)'''
    
    # Reemplazar el m√©todo completo
    new_content = content.replace(
        update_match.group(0),
        new_update + '\n'
    )
    
    # 4. Guardar
    print("\n3Ô∏è‚É£ GUARDANDO CAMBIOS...")
    
    with open(engine_file, 'w') as f:
        f.write(new_content)
    
    print("‚úÖ Archivo actualizado")
    
    # 5. Crear test de verificaci√≥n
    test_script = '''#!/usr/bin/env python3
"""
üß™ TEST FINAL COMPLETO - Verificar engine.update()
"""

import os
import sys
import numpy as np

current_dir = os.getcwd()
if 'trajectory_hub' in current_dir:
    parent_dir = os.path.dirname(current_dir)
    sys.path.insert(0, parent_dir)

os.environ['DISABLE_OSC'] = '1'

print("üß™ TEST COMPLETO DE CONCENTRACI√ìN CON ENGINE.UPDATE()\\n")

try:
    from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine
    
    # Crear engine y macro
    engine = EnhancedTrajectoryEngine()
    macro_id = engine.create_macro("test", source_count=5, formation="circle", spacing=3.0)
    
    print("‚úÖ Macro creado con 5 fuentes en c√≠rculo")
    
    if hasattr(engine, '_source_motions'):
        motions = engine._source_motions
        
        # Posiciones iniciales
        print("\\nüìç POSICIONES INICIALES:")
        positions_before = {}
        for i, (source_id, motion) in enumerate(motions.items()):
            pos = motion.state.position.copy()
            positions_before[source_id] = pos
            print(f"   Fuente {source_id}: {pos}")
        
        # Aplicar concentraci√≥n
        print("\\nüéØ APLICANDO CONCENTRACI√ìN (factor 0.2)...")
        engine.set_macro_concentration(macro_id, 0.2)
        
        # Llamar engine.update() varias veces
        print("\\nüîÑ LLAMANDO ENGINE.UPDATE() 5 VECES...")
        for i in range(5):
            engine.update()
        
        # Posiciones finales
        print("\\nüìç POSICIONES FINALES:")
        all_moved = True
        for source_id, motion in motions.items():
            pos = motion.state.position
            before = positions_before[source_id]
            
            print(f"   Fuente {source_id}: {pos}")
            
            if not np.allclose(before, pos):
                delta = pos - before
                print(f"      ‚úÖ Se movi√≥: Œî = {delta}")
            else:
                print(f"      ‚ùå No se movi√≥")
                all_moved = False
        
        if all_moved:
            print("\\nüéâ ¬°TODAS LAS FUENTES SE CONCENTRARON!")
            print("   La concentraci√≥n funciona correctamente con engine.update()")
        else:
            print("\\n‚ö†Ô∏è  Algunas fuentes no se movieron")
            print("   (Esto puede ser normal si ya estaban en el centro)")
    
    print("\\n‚úÖ Test completado exitosamente")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()

print("\\n" + "="*60)
print("üöÄ Si todas las fuentes se movieron hacia el centro,")
print("   entonces el sistema est√° funcionando perfectamente.")
print("\\nüìä Pr√≥ximo paso:")
print("   python trajectory_hub/interface/interactive_controller.py")
print("\\nüéØ ¬°La concentraci√≥n deber√≠a funcionar en Spat!")
'''
    
    with open("test_engine_update_complete.py", 'w') as f:
        f.write(test_script)
    
    print("\n‚úÖ Test creado: test_engine_update_complete.py")
    
    return True

if __name__ == "__main__":
    success = fix_engine_update()
    
    if success:
        print("\n" + "="*60)
        print("üéâ ENGINE.UPDATE() ARREGLADO")
        print("="*60)
        
        print("\n‚úÖ Ahora engine.update():")
        print("   1. Llama a motion.update(dt) para cada fuente")
        print("   2. Obtiene las posiciones actualizadas")
        print("   3. Las env√≠a via OSC")
        
        print("\nüöÄ EJECUTA EL TEST FINAL:")
        print("   python test_engine_update_complete.py")
        
        print("\nüìä Si funciona, prueba en el controller:")
        print("   python trajectory_hub/interface/interactive_controller.py")
        
        print("\nüéØ ¬°ESTE ES EL √öLTIMO PASO!")