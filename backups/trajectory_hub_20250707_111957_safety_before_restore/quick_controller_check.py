#!/usr/bin/env python3
"""
‚ö° VERIFICACI√ìN R√ÅPIDA DEL CONTROLADOR
üéÆ Encuentra qu√© opciones est√°n disponibles
"""

import os
import re

print("üéÆ ANALIZANDO CONTROLADOR INTERACTIVO")
print("="*60)

controller_file = "trajectory_hub/interface/interactive_controller.py"

if not os.path.exists(controller_file):
    print(f"‚ùå No se encuentra: {controller_file}")
    # Buscar en otras ubicaciones
    for root, dirs, files in os.walk("."):
        if "interactive_controller.py" in files:
            controller_file = os.path.join(root, "interactive_controller.py")
            print(f"‚úÖ Encontrado en: {controller_file}")
            break

if os.path.exists(controller_file):
    with open(controller_file, 'r') as f:
        content = f.read()
        lines = content.split('\n')
    
    # Buscar opciones del men√∫
    print("\nüìã OPCIONES DEL MEN√ö PRINCIPAL:")
    print("-"*60)
    
    menu_options = []
    for i, line in enumerate(lines):
        # Buscar l√≠neas que parecen opciones de men√∫ (n√∫mero seguido de punto o par√©ntesis)
        if re.match(r'^\s*\d+[\.\)]\s+\w+', line):
            menu_options.append((i+1, line.strip()))
            
            # Si es opci√≥n de concentraci√≥n, mostrarla destacada
            if 'concentra' in line.lower():
                print(f"üéØ L√≠nea {i+1}: {line.strip()}")
            else:
                print(f"   L√≠nea {i+1}: {line.strip()}")
    
    # Buscar m√©todos relacionados con concentraci√≥n
    print("\nüîç M√âTODOS DE CONCENTRACI√ìN EN EL CONTROLADOR:")
    print("-"*60)
    
    # Buscar definiciones de m√©todos
    methods = re.findall(r'def\s+(\w+)\s*\(self', content)
    concentration_methods = []
    
    for method in methods:
        if any(kw in method.lower() for kw in ['concentra', 'focus', 'converge']):
            concentration_methods.append(method)
            
            # Buscar la implementaci√≥n
            method_start = content.find(f'def {method}')
            if method_start != -1:
                # Extraer las primeras l√≠neas del m√©todo
                method_snippet = content[method_start:method_start+500]
                
                # Buscar qu√© m√©todo del engine llama
                engine_calls = re.findall(r'self\.engine\.(\w+)\(', method_snippet)
                if engine_calls:
                    print(f"\n‚úÖ M√©todo: {method}()")
                    print(f"   Llama a engine.{engine_calls[0]}()")
    
    # Buscar la opci√≥n 31 espec√≠ficamente (mencionada en el paste.txt)
    print("\nüéØ BUSCANDO OPCI√ìN 31 (Control de Concentraci√≥n):")
    print("-"*60)
    
    for i, line in enumerate(lines):
        if '31' in line and ('concentra' in line.lower() or 'control' in line.lower()):
            # Mostrar contexto
            print(f"\nEncontrado en l√≠nea {i+1}:")
            for j in range(max(0, i-2), min(len(lines), i+5)):
                print(f"   {lines[j]}")
            
            # Buscar el case o if que maneja esta opci√≥n
            for j in range(i, min(len(lines), i+50)):
                if 'selection == 31' in lines[j] or 'choice == 31' in lines[j] or 'option == 31' in lines[j]:
                    print(f"\nüìç Handler encontrado en l√≠nea {j+1}")
                    # Mostrar qu√© hace
                    for k in range(j, min(len(lines), j+10)):
                        if 'self.' in lines[k]:
                            print(f"   {lines[k].strip()}")
                    break
else:
    print("‚ùå No se pudo encontrar el archivo del controlador")

print("\n‚úÖ An√°lisis completado")