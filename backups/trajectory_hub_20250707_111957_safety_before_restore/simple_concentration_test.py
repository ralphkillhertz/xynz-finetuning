#!/usr/bin/env python3
"""
üß™ Test Simplificado: Concentraci√≥n y Rotaci√≥n
‚ö° Ir directo al problema sin complicaciones
"""

import sys
import os

# Auto-detectar ruta
current_dir = os.getcwd()
if 'trajectory_hub' in current_dir:
    parent_dir = os.path.dirname(current_dir)
    sys.path.insert(0, parent_dir)

def simple_test():
    """Test minimalista del sistema"""
    print("üß™ TEST SIMPLIFICADO\n")
    
    # Importar engine
    from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine
    
    # Crear engine sin OSC
    os.environ['DISABLE_OSC'] = '1'
    engine = EnhancedTrajectoryEngine()
    
    # 1. Crear macro
    print("1Ô∏è‚É£ Creando macro...")
    macro_id = engine.create_macro("test", source_count=3, formation="line", spacing=2.0)
    print(f"   ‚úì Macro: {macro_id}")
    
    # 2. Test concentraci√≥n
    print("\n2Ô∏è‚É£ Test Concentraci√≥n")
    print("   Estado inicial:")
    state = engine.get_macro_concentration_state(macro_id)
    print(f"   ‚Üí {state}")
    
    print("\n   Aplicando concentraci√≥n 0.1...")
    engine.set_macro_concentration(macro_id, 0.1)
    
    # Actualizar
    for _ in range(10):
        engine.update()
    
    state = engine.get_macro_concentration_state(macro_id)
    print(f"   ‚Üí Estado actual: {state}")
    
    # 3. Test rotaci√≥n MS
    print("\n3Ô∏è‚É£ Test Rotaci√≥n MS")
    print("   Aplicando rotaci√≥n circular...")
    engine.apply_algorithmic_rotation_ms(macro_id, 'circular', speed=5.0, amplitude=1.0)
    
    # Verificar
    if hasattr(engine, 'macro_rotations_algo'):
        active = list(engine.macro_rotations_algo.keys())
        print(f"   ‚Üí Rotaciones activas: {active}")
    
    # 4. Test combinado con IS
    print("\n4Ô∏è‚É£ Test con IS")
    
    # Obtener nombres de fuentes
    source_names = engine.get_source_names()
    print(f"   Fuentes disponibles: {len(source_names)}")
    
    if source_names:
        # Aplicar IS a la primera fuente
        first = source_names[0]
        print(f"   Aplicando c√≠rculo a: {first}")
        engine.set_individual_trajectory(first, 'circle')
        
        # Actualizar
        for _ in range(5):
            engine.update()
        
        # Verificar estados
        print("\n5Ô∏è‚É£ VERIFICACI√ìN FINAL:")
        
        # Concentraci√≥n
        conc = engine.get_macro_concentration_state(macro_id)
        if conc and conc.get('factor', 1.0) < 1.0:
            print("   ‚úÖ Concentraci√≥n activa")
        else:
            print("   ‚ùå Concentraci√≥n NO activa")
        
        # Rotaci√≥n MS
        if hasattr(engine, 'macro_rotations_algo') and macro_id in engine.macro_rotations_algo:
            print("   ‚úÖ Rotaci√≥n MS activa")
        else:
            print("   ‚ùå Rotaci√≥n MS NO activa")
        
        print("\nüí° DIAGN√ìSTICO:")
        print("   El problema es que los componentes no se est√°n sumando")
        print("   cuando IS est√° activo. Necesitamos verificar la ")
        print("   implementaci√≥n de la arquitectura de deltas.")
    
    # 6. Buscar el c√≥digo problem√°tico
    print("\n6Ô∏è‚É£ BUSCANDO LA CAUSA:")
    
    # Verificar si existe apply_concentration
    if hasattr(engine, 'apply_concentration'):
        print("   ‚úÖ apply_concentration existe")
    else:
        print("   ‚ùå apply_concentration NO existe")
    
    # Verificar m√©todos de aplicaci√≥n
    methods = ['apply_algorithmic_rotation_ms', 'apply_concentration', 'apply_individual_trajectory']
    for method in methods:
        if hasattr(engine, method):
            print(f"   ‚úÖ {method} disponible")
        else:
            print(f"   ‚ö†Ô∏è  {method} no encontrado")

if __name__ == "__main__":
    try:
        simple_test()
        print("\n" + "="*60)
        print("üîß SOLUCI√ìN NECESARIA:")
        print("="*60)
        print("\nüìù El sistema necesita que todos los componentes")
        print("   (concentraci√≥n, rotaci√≥n MS, IS) se sumen en lugar")
        print("   de sobrescribirse. Ejecuta:")
        print("\n   python fix_component_combination.py")
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()