#!/usr/bin/env python3
"""
üß™ TEST: CONCENTRACI√ìN INDEPENDIENTE DE IS
‚ö° Verifica si la concentraci√≥n funciona sin trayectorias individuales
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print("üß™ TEST DE INDEPENDENCIA DE CONCENTRACI√ìN")
print("="*60)

# 1. TEST B√ÅSICO: Crear macro sin IS y aplicar concentraci√≥n
print("\n1Ô∏è‚É£ TEST B√ÅSICO: Macro sin trayectorias IS")
print("-"*60)

try:
    from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine
    
    # Crear engine
    engine = EnhancedTrajectoryEngine()
    print("‚úÖ Engine creado")
    
    # Crear macro SIN trayectorias individuales
    macro_id = engine.create_macro("test_concentration", 10)
    print(f"‚úÖ Macro creado: {macro_id}")
    
    # Intentar aplicar concentraci√≥n
    print("\nüéØ Aplicando concentraci√≥n SIN trayectorias IS...")
    
    try:
        # Usar el m√©todo correcto
        engine.set_macro_concentration(macro_id, factor=0.0)  # 0 = totalmente concentrado
        print("‚úÖ set_macro_concentration ejecutado sin errores")
        
        # Verificar estado
        state = engine.get_macro_concentration_state(macro_id)
        if 'error' not in state:
            print(f"‚úÖ Estado de concentraci√≥n: factor={state.get('factor', 'N/A')}")
            
            # Hacer update para ver si realmente funciona
            engine.update()
            print("‚úÖ engine.update() ejecutado sin errores")
            
            # Toggle para verificar
            engine.toggle_macro_concentration(macro_id)
            print("‚úÖ toggle_macro_concentration ejecutado")
            
            print("\n‚úÖ ¬°CONCENTRACI√ìN FUNCIONA SIN IS!")
            concentration_works_without_is = True
            
        else:
            print(f"‚ùå Error en estado: {state.get('error')}")
            concentration_works_without_is = False
            
    except Exception as e:
        print(f"‚ùå Error al aplicar concentraci√≥n: {e}")
        concentration_works_without_is = False
        
except Exception as e:
    print(f"‚ùå Error general: {e}")
    concentration_works_without_is = False

# 2. ANALIZAR C√ìDIGO FUENTE
print("\n\n2Ô∏è‚É£ AN√ÅLISIS DE C√ìDIGO FUENTE")
print("-"*60)

engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"
if os.path.exists(engine_file):
    with open(engine_file, 'r') as f:
        content = f.read()
    
    # Buscar el m√©todo set_macro_concentration
    method_start = content.find('def set_macro_concentration')
    if method_start != -1:
        # Extraer el m√©todo completo
        method_end = content.find('\n    def ', method_start + 1)
        if method_end == -1:
            method_end = method_start + 2000
        
        method_code = content[method_start:method_end]
        
        print("üîç Analizando set_macro_concentration...")
        
        # Buscar si verifica trayectorias individuales
        checks_for_is = False
        if 'individual_trajectory' in method_code:
            print("  ‚ö†Ô∏è Menciona 'individual_trajectory'")
            checks_for_is = True
            
            # Ver contexto
            lines = method_code.split('\n')
            for i, line in enumerate(lines):
                if 'individual_trajectory' in line:
                    print(f"     L√≠nea {i}: {line.strip()}")
        
        # Buscar si crea ConcentrationComponent independientemente
        if 'ConcentrationComponent()' in method_code:
            print("  ‚úÖ Crea ConcentrationComponent sin condiciones")
        
        # Buscar l√≠nea espec√≠fica que podr√≠a causar dependencia
        if 'if' in method_code and 'individual_trajectory' in method_code:
            print("  ‚ùå Posible dependencia condicional de IS")
        else:
            print("  ‚úÖ No parece tener dependencia directa de IS")

# 3. TEST DE ROTACI√ìN MS CON IS
print("\n\n3Ô∏è‚É£ TEST: ROTACI√ìN MS CON IS ACTIVA")
print("-"*60)

try:
    # Crear nuevo macro
    macro_id2 = engine.create_macro("test_rotation", 5)
    print(f"‚úÖ Macro creado: {macro_id2}")
    
    # Agregar trayectorias IS
    print("\nüéØ Agregando trayectorias IS...")
    for i in range(5):
        engine.set_individual_trajectory(i, 'circle', mode='fix')
    print("‚úÖ Trayectorias IS configuradas")
    
    # Intentar rotaci√≥n MS
    print("\nüîÑ Aplicando rotaci√≥n MS con IS activa...")
    try:
        engine.set_macro_rotation(macro_id2, pitch=0.5, yaw=0.5, roll=0.0)
        print("‚úÖ set_macro_rotation ejecutado")
        
        # Verificar si se aplica
        engine.update()
        print("‚úÖ Rotaci√≥n MS funciona con IS activa")
        ms_rotation_works_with_is = True
        
    except Exception as e:
        print(f"‚ùå Error en rotaci√≥n MS: {e}")
        ms_rotation_works_with_is = False
        
except Exception as e:
    print(f"‚ùå Error en test de rotaci√≥n: {e}")
    ms_rotation_works_with_is = False

# 4. BUSCAR BLOQUEOS EN UPDATE
print("\n\n4Ô∏è‚É£ AN√ÅLISIS DE BLOQUEOS EN UPDATE")
print("-"*60)

if os.path.exists(engine_file):
    # Buscar el m√©todo update
    update_start = content.find('def update(self')
    if update_start != -1:
        update_end = content.find('\n    def ', update_start + 1)
        if update_end == -1:
            update_end = update_start + 3000
            
        update_code = content[update_start:update_end]
        
        print("üîç Analizando engine.update()...")
        
        # Buscar patrones de bloqueo
        lines = update_code.split('\n')
        blocking_patterns = []
        
        for i, line in enumerate(lines):
            # Buscar condiciones que podr√≠an bloquear
            if 'if' in line and ('individual_trajectory' in line or 'IS' in line):
                if 'continue' in lines[i:i+5] or 'return' in lines[i:i+5]:
                    blocking_patterns.append((i, line.strip()))
                    
        if blocking_patterns:
            print(f"  ‚ùå Encontrados {len(blocking_patterns)} posibles bloqueos:")
            for line_num, pattern in blocking_patterns[:3]:
                print(f"     L√≠nea {line_num}: {pattern}")
        else:
            print("  ‚úÖ No se encontraron bloqueos obvios")

# RESUMEN
print("\n\n" + "="*60)
print("üìä RESUMEN DE RESULTADOS")
print("="*60)

print("\nüéØ CONCENTRACI√ìN:")
if concentration_works_without_is:
    print("  ‚úÖ Funciona SIN trayectorias IS")
else:
    print("  ‚ùå Depende de trayectorias IS")

print("\nüîÑ ROTACI√ìN MS:")
if ms_rotation_works_with_is:
    print("  ‚úÖ Funciona CON trayectorias IS")
else:
    print("  ‚ùå Bloqueada por trayectorias IS")

print("\nüèóÔ∏è ARQUITECTURA:")
print("  ‚ùå Secuencial con sobrescritura (confirmado)")

print("\nüí° RECOMENDACI√ìN:")
if concentration_works_without_is and ms_rotation_works_with_is:
    print("  Los problemas principales parecen estar resueltos")
    print("  Solo falta implementar arquitectura de suma")
else:
    print("  Implementar arquitectura paralela de deltas")
    print("  para resolver todos los problemas")

print("\n‚úÖ Test completado")