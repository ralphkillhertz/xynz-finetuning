import json
from datetime import datetime
import os

def save_complete_project_state():
    """Guardar estado completo del proyecto con toda la informaci√≥n cr√≠tica"""
    
    # Cargar ADN actual
    dna = {}
    if os.path.exists("PROJECT_DNA_IMMUTABLE.json"):
        with open("PROJECT_DNA_IMMUTABLE.json", 'r') as f:
            dna = json.load(f)
    
    state = {
        "üî¥ ESTADO_CR√çTICO": {
            "timestamp": datetime.now().isoformat(),
            "session_id": "20250709_sphere_restoration_architecture_documented",
            "project": "trajectory_hub",
            "version": "0.87",
            "status": "Sistema restaurado sin sphere, arquitectura documentada",
            
            "‚ö†Ô∏è ADVERTENCIA": [
                "EL SISTEMA NO RESPETA LA ARQUITECTURA IDEAL",
                "FIXES TEMPORALES HASTA REFACTORIZACI√ìN COMPLETA",
                "SIEMPRE CARGAR ESTE DOCUMENTO PRIMERO"
            ]
        },
        
        "üèóÔ∏è ARQUITECTURA_ACTUAL": {
            "descripci√≥n": "Arquitectura monol√≠tica con violaciones m√∫ltiples",
            
            "flujo_actual": {
                "1": "Usuario selecciona crear macro en CLI/Interactive",
                "2": "CLI llama DIRECTAMENTE a Engine.create_macro() ‚ùå",
                "3": "Engine recibe 'formation' string y calcula internamente ‚ùå",
                "4": "Engine calcula posiciones (deber√≠a solo aplicarlas) ‚ùå",
                "5": "Engine env√≠a a OSC Bridge",
                "6": "OSC Bridge env√≠a a Spat"
            },
            
            "responsabilidades_actuales": {
                "CLI_Interface": {
                    "hace": ["Muestra men√∫s", "Captura input", "Llama a Engine directamente"],
                    "problemas": ["NO usa CommandProcessor", "Acceso directo a Engine"]
                },
                "Interactive_Controller": {
                    "hace": ["TODO - 122 m√©todos", "UI + L√≥gica + Procesamiento"],
                    "problemas": ["Monol√≠tico", "Deber√≠a tener m√°x 25 m√©todos"]
                },
                "Engine": {
                    "hace": ["Crea macros", "CALCULA formaciones", "Gestiona sources", "Env√≠a OSC"],
                    "problemas": ["NO deber√≠a calcular formaciones", "Demasiadas responsabilidades"]
                },
                "FormationManager": {
                    "hace": ["Calcula formaciones correctamente"],
                    "problemas": ["NO es usado por el flujo principal"]
                },
                "CommandProcessor": {
                    "hace": ["Existe pero no se usa en flujo principal"],
                    "problemas": ["Bypassed por CLI"]
                }
            },
            
            "problemas_cr√≠ticos": [
                "Engine calcula formaciones en lugar de recibirlas",
                "CLI no usa CommandProcessor",
                "FormationManager existe pero no se integra",
                "Interactive Controller es monol√≠tico"
            ]
        },
        
        "üéØ ARQUITECTURA_DESEADA": {
            "descripci√≥n": "Arquitectura por capas con separaci√≥n estricta",
            
            "flujo_correcto": {
                "1": "Usuario interact√∫a con UI (CLI/Interactive/MCP/Gestos)",
                "2": "UI crea SemanticCommand con intenci√≥n",
                "3": "CommandProcessor interpreta comando",
                "4": "CommandProcessor usa FormationManager para calcular",
                "5": "CommandProcessor pasa positions[] a Engine",
                "6": "Engine SOLO aplica positions y env√≠a OSC",
                "7": "UI muestra resultado"
            },
            
            "responsabilidades_estrictas": {
                "UI_Layer": {
                    "incluye": ["CLI_Interface", "Interactive_Controller", "MCP_Server", "Gesture_Handler"],
                    "responsabilidades": ["SOLO captura input", "SOLO muestra output", "Crea SemanticCommands"],
                    "prohibido": ["L√≥gica de negocio", "C√°lculos", "Acceso directo a Engine"]
                },
                "Command_Layer": {
                    "incluye": ["CommandProcessor", "IntentionParser"],
                    "responsabilidades": ["TODA la l√≥gica de negocio", "Interpretaci√≥n sem√°ntica", "Orquestaci√≥n"],
                    "prohibido": ["UI", "C√°lculos directos", "Comunicaci√≥n OSC"]
                },
                "Calculation_Layer": {
                    "incluye": ["FormationManager", "TrajectoryCalculator", "ModulationEngine"],
                    "responsabilidades": ["C√°lculos matem√°ticos", "Algoritmos", "Transformaciones"],
                    "prohibido": ["L√≥gica de negocio", "UI", "Estado"]
                },
                "Execution_Layer": {
                    "incluye": ["Engine", "OSC_Bridge"],
                    "responsabilidades": ["Aplicar estados", "Comunicaci√≥n externa", "Gesti√≥n de sources"],
                    "prohibido": ["C√°lculos", "L√≥gica de negocio", "UI"]
                }
            },
            
            "principios_arquitect√≥nicos": [
                "SEPARACI√ìN DE RESPONSABILIDADES: Cada capa una funci√≥n",
                "FLUJO UNIDIRECCIONAL: UI ‚Üí Command ‚Üí Calc ‚Üí Execution",
                "INMUTABILIDAD: Estados no se modifican, se reemplazan",
                "TESTABILIDAD: Cada capa independently testeable",
                "EXTENSIBILIDAD: Nuevas features sin tocar capas existentes"
            ]
        },
        
        "üîß INSTRUCCIONES_SPHERE": {
            "problema_actual": "Engine usa _calculate_circle para sphere, resultando en 2D",
            
            "soluci√≥n_temporal": {
                "descripci√≥n": "Hacer que Engine use FormationManager para sphere",
                "pasos": [
                    "1. A√±adir import FormationManager en Engine",
                    "2. A√±adir caso elif formation == 'sphere'",
                    "3. Delegar c√°lculo a FormationManager",
                    "4. Verificar que OSC env√≠e x,y,z"
                ],
                "c√≥digo": """
elif formation == "sphere":
    # Soluci√≥n temporal - Engine usa FormationManager
    if not hasattr(self, '_fm'):
        self._fm = FormationManager()
    positions = self._fm.calculate_formation("sphere", self.config['n_sources'])
    print(f"üåê Sphere 3D: {len(positions)} posiciones calculadas")
"""
            },
            
            "soluci√≥n_correcta": {
                "descripci√≥n": "Refactorizar para que Engine reciba positions",
                "requiere": "Implementaci√≥n completa del CommandProcessor",
                "beneficios": ["Separaci√≥n de responsabilidades", "F√°cil a√±adir formaciones", "Testeable"]
            }
        },
        
        "üìä M√âTRICAS_ESTADO": {
            "funcionalidades": {
                "formaciones_2D": "5/5 ‚úÖ",
                "formaciones_3D": "0/1 ‚ùå (sphere pendiente)",
                "osc_comunicaci√≥n": "100% ‚úÖ",
                "sistema_deltas": "100% ‚úÖ"
            },
            "arquitectura": {
                "separaci√≥n_responsabilidades": "20% ‚ùå",
                "uso_command_processor": "10% ‚ùå",
                "modularidad": "30% ‚ùå",
                "testabilidad": "25% ‚ùå"
            },
            "deuda_t√©cnica": {
                "interactive_controller_m√©todos": "122 (objetivo: 25)",
                "engine_responsabilidades": "4 (objetivo: 2)",
                "flujo_directo_ui_engine": "S√≠ (objetivo: No)"
            }
        },
        
        "üõ£Ô∏è ROADMAP_MIGRACI√ìN": {
            "fase_0_actual": {
                "nombre": "Fixes temporales",
                "estado": "En progreso",
                "tareas": ["Sphere con FormationManager en Engine", "Mantener funcionalidad"]
            },
            "fase_1": {
                "nombre": "Implementar CommandProcessor",
                "duraci√≥n": "1 semana",
                "tareas": [
                    "Crear SemanticCommand class",
                    "Implementar IntentionParser",
                    "Conectar CLI ‚Üí CommandProcessor"
                ]
            },
            "fase_2": {
                "nombre": "Refactorizar Engine",
                "duraci√≥n": "3-4 d√≠as",
                "tareas": [
                    "Engine.create_macro recibe positions[]",
                    "Eliminar c√°lculos de Engine",
                    "Usar solo FormationManager"
                ]
            },
            "fase_3": {
                "nombre": "Reducir InteractiveController",
                "duraci√≥n": "1 semana",
                "tareas": [
                    "Extraer l√≥gica a CommandProcessor",
                    "Dejar solo UI (25 m√©todos)",
                    "Crear tests"
                ]
            },
            "fase_4": {
                "nombre": "Implementar MCP + Gestos",
                "duraci√≥n": "2 semanas",
                "tareas": [
                    "MCP Server",
                    "Gesture Handler",
                    "Timeline Engine"
                ]
            }
        },
        
        "‚ö†Ô∏è REGLAS_INMUTABLES": [
            "1. Engine NUNCA debe calcular formaciones, solo aplicar positions",
            "2. TODO input debe pasar por CommandProcessor",
            "3. InteractiveController m√°ximo 25 m√©todos",
            "4. FormationManager solo calcula, no ejecuta",
            "5. OSC Bridge solo transmite, no procesa",
            "6. UI nunca accede directamente a Engine"
        ],
        
        "üíæ ARCHIVOS_CLAVE": {
            "documentaci√≥n": [
                "PROJECT_DNA_IMMUTABLE.json - ADN completo del proyecto",
                "PROJECT_STRUCTURE_ANALYSIS.json - An√°lisis arquitect√≥nico",
                "SESSION_STATE_*.json - Estados de sesi√≥n"
            ],
            "configuraci√≥n": [
                "trajectory_hub/config.py - Configuraci√≥n general",
                "docs/ARQUITECTURA_VISIONARIA.md - Visi√≥n futura"
            ],
            "para_modificar": {
                "sphere": "trajectory_hub/core/enhanced_trajectory_engine.py",
                "formaciones": "trajectory_hub/control/managers/formation_manager.py",
                "osc": "trajectory_hub/core/spat_osc_bridge.py"
            }
        },
        
        "üö® ESTADO_ACTUAL_SISTEMA": {
            "funciona": True,
            "sphere_implementado": False,
            "errores_conocidos": [
                "Sistema no arranca si se a√±ade sphere incorrectamente",
                "Import FormationManager debe ir con otros imports trajectory_hub"
            ],
            "√∫ltimo_backup_funcional": "enhanced_trajectory_engine.py.backup_macro_fix_20250708_093056"
        },
        
        "üìù NOTAS_PR√ìXIMA_SESI√ìN": [
            "CARGAR PROJECT_DNA_IMMUTABLE.json PRIMERO",
            "Verificar estado con diagnose_current_state.py",
            "NO hacer cambios autom√°ticos sin entender contexto",
            "Sphere debe a√±adirse manualmente siguiendo instrucciones",
            "Considerar iniciar Fase 1 del roadmap (CommandProcessor)"
        ],
        
        "üéØ COMANDOS_√öTILES": {
            "verificar_sistema": "python -m trajectory_hub.interface.interactive_controller",
            "test_formaciones": "python check_sphere_helper.py",
            "ver_estructura": "cat PROJECT_DNA_IMMUTABLE.json",
            "diagnosticar": "python diagnose_current_state.py"
        }
    }
    
    # A√±adir el ADN completo si existe
    if dna:
        state["üß¨ PROJECT_DNA_EMBEDDED"] = dna
    
    # Guardar con timestamp
    filename = f"PROJECT_STATE_COMPLETE_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(state, f, indent=2, ensure_ascii=False)
    
    # Tambi√©n guardar como LATEST
    with open("PROJECT_STATE_LATEST.json", 'w', encoding='utf-8') as f:
        json.dump(state, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ Estado completo guardado: {filename}")
    print("‚úÖ Tambi√©n guardado como: PROJECT_STATE_LATEST.json")
    
    return state

def print_summary(state):
    """Imprimir resumen del estado guardado"""
    print("\n" + "="*60)
    print("üìä RESUMEN DEL ESTADO GUARDADO")
    print("="*60)
    
    print("\nüèóÔ∏è ARQUITECTURA:")
    print("  Actual: Monol√≠tica con violaciones")
    print("  Deseada: Por capas con separaci√≥n estricta")
    
    print("\nüìà PROGRESO:")
    metrics = state["üìä M√âTRICAS_ESTADO"]["funcionalidades"]
    for key, value in metrics.items():
        print(f"  {key}: {value}")
    
    print("\n‚ö†Ô∏è PROBLEMAS PRINCIPALES:")
    for problema in state["üèóÔ∏è ARQUITECTURA_ACTUAL"]["problemas_cr√≠ticos"]:
        print(f"  ‚Ä¢ {problema}")
    
    print("\nüõ£Ô∏è PR√ìXIMOS PASOS:")
    print("  1. A√±adir sphere manualmente (instrucciones en el estado)")
    print("  2. Iniciar Fase 1: Implementar CommandProcessor")
    print("  3. Seguir roadmap de migraci√≥n")
    
    print("\nüí° IMPORTANTE PARA PR√ìXIMA SESI√ìN:")
    for nota in state["üìù NOTAS_PR√ìXIMA_SESI√ìN"]:
        print(f"  ‚Ä¢ {nota}")

if __name__ == "__main__":
    print("üíæ GUARDANDO ESTADO COMPLETO DEL PROYECTO")
    print("="*60)
    
    state = save_complete_project_state()
    print_summary(state)
    
    print("\n\n‚úÖ ESTADO GUARDADO EXITOSAMENTE")
    print("\nüìã Este archivo contiene:")
    print("  ‚Ä¢ Arquitectura actual (con problemas)")
    print("  ‚Ä¢ Arquitectura deseada (objetivo)")
    print("  ‚Ä¢ Instrucciones para sphere")
    print("  ‚Ä¢ ADN del proyecto")
    print("  ‚Ä¢ Roadmap de migraci√≥n")
    print("  ‚Ä¢ Reglas inmutables")
    print("\nüöÄ √ösalo como referencia en cada sesi√≥n")