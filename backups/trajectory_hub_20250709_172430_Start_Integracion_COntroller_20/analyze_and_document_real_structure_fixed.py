import os
import json
import re
from datetime import datetime
from pathlib import Path

def analyze_real_structure():
    """Analizar la estructura REAL actual del proyecto"""
    print("üî¨ AN√ÅLISIS PROFUNDO DE LA ESTRUCTURA ACTUAL")
    print("="*60)
    
    structure = {
        "timestamp": datetime.now().isoformat(),
        "version": "1.0",
        "ESTADO_ACTUAL": {},
        "ESTADO_OBJETIVO": {},
        "PROBLEMAS_DETECTADOS": [],
        "ROADMAP_MIGRACION": []
    }
    
    # 1. Analizar flujo de creaci√≥n de macros
    print("\n1Ô∏è‚É£ ANALIZANDO FLUJO DE CREACI√ìN DE MACROS...")
    
    flow = analyze_macro_creation_flow()
    structure["ESTADO_ACTUAL"]["flujo_creacion_macros"] = flow
    
    # 2. Analizar responsabilidades actuales
    print("\n2Ô∏è‚É£ ANALIZANDO RESPONSABILIDADES POR COMPONENTE...")
    
    responsibilities = analyze_component_responsibilities()
    structure["ESTADO_ACTUAL"]["responsabilidades"] = responsibilities
    
    # 3. Detectar violaciones arquitect√≥nicas
    print("\n3Ô∏è‚É£ DETECTANDO VIOLACIONES ARQUITECT√ìNICAS...")
    
    violations = detect_architectural_violations()
    structure["PROBLEMAS_DETECTADOS"] = violations
    
    # 4. Definir estado objetivo
    print("\n4Ô∏è‚É£ DEFINIENDO ESTADO OBJETIVO...")
    
    structure["ESTADO_OBJETIVO"] = define_target_architecture()
    
    # 5. Crear roadmap
    print("\n5Ô∏è‚É£ CREANDO ROADMAP DE MIGRACI√ìN...")
    
    structure["ROADMAP_MIGRACION"] = create_migration_roadmap()
    
    return structure

def analyze_macro_creation_flow():
    """Analizar el flujo real de creaci√≥n de macros"""
    flow = {
        "inicio": "CLI Interface",
        "pasos": [],
        "problemas": []
    }
    
    # CLI Interface
    cli_file = "trajectory_hub/control/interfaces/cli_interface.py"
    if os.path.exists(cli_file):
        with open(cli_file, 'r') as f:
            cli_content = f.read()
        
        # ¬øQu√© hace cuando el usuario selecciona crear macro?
        if 'create_macro' in cli_content:
            # Buscar qu√© llama
            create_calls = re.findall(r'(\w+)\.create_macro\(', cli_content)
            if create_calls:
                flow["pasos"].append({
                    "componente": "CLI Interface",
                    "accion": f"Llama a {create_calls[0]}.create_macro()",
                    "problema": "NO usa CommandProcessor" if 'command_processor' not in create_calls[0].lower() else None
                })
    
    # Engine
    engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"
    if os.path.exists(engine_file):
        with open(engine_file, 'r') as f:
            engine_content = f.read()
        
        # ¬øQu√© hace create_macro?
        create_match = re.search(r'def create_macro\((.*?)\):', engine_content, re.DOTALL)
        if create_match:
            params = create_match.group(1)
            # Fix: reemplazar newline fuera del f-string
            params_clean = params.replace('\n', ' ')
            flow["pasos"].append({
                "componente": "Engine",
                "accion": "Recibe create_macro con par√°metros",
                "detalles": f"Par√°metros: {params_clean}",
                "problema": "Recibe 'formation' y calcula internamente" if 'formation' in params else None
            })
            
            # ¬øCalcula formaciones?
            if 'if formation ==' in engine_content or 'elif formation ==' in engine_content:
                flow["pasos"].append({
                    "componente": "Engine",
                    "accion": "Calcula formaciones internamente",
                    "problema": "VIOLA arquitectura - deber√≠a solo aplicar posiciones"
                })
    
    return flow

def analyze_component_responsibilities():
    """Analizar qu√© hace realmente cada componente"""
    components = {}
    
    # Lista de archivos clave
    files = {
        "CLI Interface": "trajectory_hub/control/interfaces/cli_interface.py",
        "Interactive Controller": "trajectory_hub/interface/interactive_controller.py",
        "Command Processor": "trajectory_hub/control/processors/command_processor.py",
        "Formation Manager": "trajectory_hub/control/managers/formation_manager.py",
        "Engine": "trajectory_hub/core/enhanced_trajectory_engine.py",
        "OSC Bridge": "trajectory_hub/core/spat_osc_bridge.py"
    }
    
    for name, filepath in files.items():
        if os.path.exists(filepath):
            with open(filepath, 'r') as f:
                content = f.read()
            
            # Contar m√©todos
            methods = re.findall(r'def (\w+)\(', content)
            
            # Detectar responsabilidades
            responsibilities = []
            
            if 'create_macro' in content:
                responsibilities.append("Crea macros")
            if 'calculate' in content and 'formation' in content:
                responsibilities.append("Calcula formaciones")
            if 'send_' in content and 'osc' in content.lower():
                responsibilities.append("Env√≠a OSC")
            if 'menu' in content or 'show_' in content:
                responsibilities.append("Muestra UI")
            if 'command' in content and 'process' in content:
                responsibilities.append("Procesa comandos")
            
            components[name] = {
                "metodos": len(methods),
                "responsabilidades": responsibilities,
                "viola_arquitectura": []
            }
            
            # Detectar violaciones
            if name == "Engine" and "Calcula formaciones" in responsibilities:
                components[name]["viola_arquitectura"].append("No deber√≠a calcular formaciones")
            
            if name == "Interactive Controller" and len(methods) > 50:
                components[name]["viola_arquitectura"].append(f"Demasiados m√©todos ({len(methods)}), m√°ximo 25")
    
    return components

def detect_architectural_violations():
    """Detectar violaciones espec√≠ficas"""
    violations = []
    
    # 1. Engine calculando formaciones
    violations.append({
        "tipo": "CR√çTICO",
        "componente": "Engine",
        "problema": "Calcula formaciones internamente en lugar de recibirlas",
        "impacto": "Imposible a√±adir formaciones sin modificar Engine",
        "solucion": "Engine.create_macro debe recibir positions[], no formation string"
    })
    
    # 2. CLI no usa CommandProcessor
    violations.append({
        "tipo": "ALTO",
        "componente": "CLI Interface",
        "problema": "Llama directamente a Engine sin pasar por CommandProcessor",
        "impacto": "L√≥gica dispersa, dif√≠cil mantener",
        "solucion": "Todo debe pasar por CommandProcessor"
    })
    
    # 3. Interactive Controller monol√≠tico
    violations.append({
        "tipo": "MEDIO",
        "componente": "Interactive Controller",
        "problema": "122 m√©todos cuando deber√≠a tener m√°ximo 25",
        "impacto": "Dif√≠cil de mantener y testear",
        "solucion": "Refactorizar delegando l√≥gica a CommandProcessor"
    })
    
    return violations

def define_target_architecture():
    """Definir la arquitectura objetivo"""
    return {
        "principios": [
            "SEPARACI√ìN ESTRICTA DE RESPONSABILIDADES",
            "FLUJO UNIDIRECCIONAL DE DATOS",
            "NING√öN COMPONENTE HACE TODO",
            "TESTABILIDAD COMPLETA"
        ],
        
        "flujo_correcto": {
            "1": "Usuario interact√∫a con UI (CLI/Interactive/MCP/Gestos)",
            "2": "UI crea SemanticCommand",
            "3": "CommandProcessor interpreta comando",
            "4": "CommandProcessor usa FormationManager para calcular",
            "5": "CommandProcessor pasa positions[] a Engine",
            "6": "Engine aplica positions y env√≠a OSC",
            "7": "UI muestra resultado"
        },
        
        "responsabilidades_estrictas": {
            "CLI Interface": ["Capturar input", "Mostrar output", "Crear comandos"],
            "Interactive Controller": ["Navegaci√≥n men√∫s", "Display", "MAX 25 m√©todos"],
            "Command Processor": ["TODA la l√≥gica", "Orquestar", "Validar"],
            "Formation Manager": ["Calcular formaciones", "Nada m√°s"],
            "Engine": ["Aplicar positions", "Gestionar sources", "Enviar OSC"],
            "OSC Bridge": ["Comunicaci√≥n OSC", "Nada de l√≥gica"]
        }
    }

def create_migration_roadmap():
    """Crear roadmap de migraci√≥n"""
    return [
        {
            "fase": 1,
            "nombre": "Fix Sphere (temporal)",
            "tareas": [
                "Hacer que Engine use FormationManager para sphere",
                "Verificar que OSC env√≠e x,y,z"
            ],
            "tiempo": "30 minutos",
            "impacto": "BAJO"
        },
        {
            "fase": 2,
            "nombre": "Refactorizar create_macro",
            "tareas": [
                "Cambiar Engine.create_macro para recibir positions[]",
                "Mover c√°lculo de formaciones a CommandProcessor",
                "Actualizar todos los llamadores"
            ],
            "tiempo": "2-3 horas",
            "impacto": "ALTO"
        },
        {
            "fase": 3,
            "nombre": "Implementar CommandProcessor completo",
            "tareas": [
                "Crear SemanticCommand class",
                "Implementar interpretaci√≥n de comandos",
                "Conectar UI ‚Üí CommandProcessor ‚Üí Engine"
            ],
            "tiempo": "1 d√≠a",
            "impacto": "ALTO"
        },
        {
            "fase": 4,
            "nombre": "Refactorizar Interactive Controller",
            "tareas": [
                "Extraer l√≥gica a CommandProcessor",
                "Reducir a 25 m√©todos",
                "Solo navegaci√≥n y display"
            ],
            "tiempo": "2 d√≠as",
            "impacto": "MEDIO"
        }
    ]

def create_immutable_dna(structure):
    """Crear ADN inmutable del proyecto"""
    dna = {
        "üß¨ TRAJECTORY_HUB_DNA_v2": {
            "version": "2.0",
            "fecha": datetime.now().isoformat(),
            "inmutable": True,
            
            "‚ö†Ô∏è INSTRUCCIONES_CRITICAS": [
                "ESTE DOCUMENTO ES LA VERDAD ABSOLUTA DEL PROYECTO",
                "DEBE SER LO PRIMERO QUE SE CARGUE EN CADA SESI√ìN",
                "NING√öN CAMBIO SIN ACTUALIZAR ESTE DOCUMENTO",
                "TODOS LOS FIXES DEBEN RESPETAR ESTA ARQUITECTURA"
            ],
            
            "üìä ESTADO_ACTUAL_REAL": structure["ESTADO_ACTUAL"],
            
            "üéØ ESTADO_OBJETIVO": structure["ESTADO_OBJETIVO"],
            
            "‚ùå VIOLACIONES_ACTUALES": structure["PROBLEMAS_DETECTADOS"],
            
            "üõ†Ô∏è ROADMAP_MIGRACION": structure["ROADMAP_MIGRACION"],
            
            "üìã REGLAS_INMUTABLES": {
                "1": "Engine NUNCA calcula formaciones, solo aplica positions",
                "2": "TODO pasa por CommandProcessor",
                "3": "Interactive Controller m√°ximo 25 m√©todos",
                "4": "FormationManager solo calcula, no ejecuta",
                "5": "OSC Bridge solo transmite, no procesa"
            },
            
            "üîß PARA_ARREGLAR_SPHERE": {
                "problema": "Engine calcula sphere como circle (2D)",
                "solucion_temporal": "Hacer que Engine use FormationManager",
                "solucion_correcta": "Refactorizar flujo completo",
                "comando": "python fix_sphere_respecting_current_architecture.py"
            },
            
            "üíæ PRESERVAR_ENTRE_SESIONES": [
                "Este DNA completo",
                "Estado de refactorizaci√≥n",
                "Problemas pendientes",
                "Decisiones arquitect√≥nicas"
            ]
        }
    }
    
    return dna

def save_everything():
    """Guardar todo el an√°lisis"""
    print("\n\nüíæ GUARDANDO AN√ÅLISIS COMPLETO...")
    
    # 1. Analizar estructura
    structure = analyze_real_structure()
    
    # 2. Crear DNA inmutable
    dna = create_immutable_dna(structure)
    
    # 3. Guardar archivos
    files_to_save = {
        "PROJECT_STRUCTURE_ANALYSIS.json": structure,
        "PROJECT_DNA_IMMUTABLE.json": dna,
        "PROJECT_DNA.json": dna  # Reemplazar el anterior
    }
    
    for filename, content in files_to_save.items():
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(content, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Guardado: {filename}")
    
    # 4. Crear fix para sphere respetando arquitectura actual
    create_sphere_fix_for_current_architecture()

def create_sphere_fix_for_current_architecture():
    """Crear fix para sphere que funcione con la arquitectura ACTUAL"""
    
    fix_content = '''
# === fix_sphere_respecting_current_architecture.py ===
"""
Fix para sphere que respeta la arquitectura ACTUAL (no la ideal)
Sabiendo que Engine calcula formaciones internamente
"""
import os
import re
from datetime import datetime
import shutil

print("üîß FIX SPHERE PARA ARQUITECTURA ACTUAL")
print("="*60)

# Dado que Engine calcula formaciones, necesitamos:
# 1. A√±adir caso sphere a Engine
# 2. Hacer que delegue a FormationManager

engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"

if os.path.exists(engine_file):
    backup = f"{engine_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy(engine_file, backup)
    
    with open(engine_file, 'r') as f:
        content = f.read()
    
    # Verificar si ya importa FormationManager
    if 'from trajectory_hub.control.managers.formation_manager import FormationManager' not in content:
        # A√±adir import despu√©s de otros imports
        import_line = "from trajectory_hub.control.managers.formation_manager import FormationManager\\n"
        
        # Buscar d√≥nde insertar
        last_import = list(re.finditer(r'^from trajectory_hub.*import.*$', content, re.MULTILINE))
        if last_import:
            insert_pos = last_import[-1].end() + 1
            content = content[:insert_pos] + import_line + content[insert_pos:]
        else:
            # Insertar despu√©s de imports est√°ndar
            insert_pos = content.find('\\n\\n') + 2
            content = content[:insert_pos] + import_line + content[insert_pos:]
    
    # Buscar d√≥nde est√°n los casos de formation
    # Patr√≥n: elif formation == "algo":
    formation_cases = list(re.finditer(r'elif formation == "[^"]+":', content))
    
    if formation_cases:
        # Insertar despu√©s del √∫ltimo caso
        last_case = formation_cases[-1]
        
        # Buscar el final de ese caso
        lines_after = content[last_case.end():].split('\\n')
        indent = len(last_case.group(0)) - len(last_case.group(0).lstrip())
        
        # Encontrar d√≥nde termina el bloque
        end_offset = 0
        for i, line in enumerate(lines_after[1:], 1):
            if line.strip() and len(line) - len(line.lstrip()) <= indent:
                end_offset = sum(len(l) + 1 for l in lines_after[:i])
                break
        
        if end_offset == 0:
            end_offset = len(content[last_case.end():])
        
        insert_pos = last_case.end() + end_offset
        
        # C√≥digo para sphere
        sphere_code = f"""
        elif formation == "sphere":
            # Usar FormationManager para sphere 3D real
            if not hasattr(self, '_fm'):
                self._fm = FormationManager()
            positions = self._fm.calculate_formation("sphere", self.config['n_sources'])
            print(f"üåê Sphere 3D: {{len(positions)}} posiciones calculadas")
"""
        
        content = content[:insert_pos] + sphere_code + content[insert_pos:]
        
        print("‚úÖ Caso sphere a√±adido a Engine")
    else:
        print("‚ùå No se encontraron casos de formation en Engine")
    
    # Guardar
    with open(engine_file, 'w') as f:
        f.write(content)
    
    print("\\n‚úÖ Engine actualizado")

# Verificar OSC
print("\\nüîç Verificando OSC...")

bridge_file = "trajectory_hub/core/spat_osc_bridge.py"

if os.path.exists(bridge_file):
    with open(bridge_file, 'r') as f:
        bridge_content = f.read()
    
    if 'def send_source_position(self, source_id: int, x: float, y: float)' in bridge_content:
        print("‚ö†Ô∏è OSC solo acepta x,y - Actualizando...")
        
        backup = f"{bridge_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy(bridge_file, backup)
        
        # Actualizar para aceptar z
        bridge_content = bridge_content.replace(
            'def send_source_position(self, source_id: int, x: float, y: float)',
            'def send_source_position(self, source_id: int, x: float, y: float, z: float = 0.0)'
        )
        
        # Actualizar env√≠o
        bridge_content = bridge_content.replace(
            '"/source/{source_id}/xyz", [x, y])',
            '"/source/{source_id}/xyz", [x, y, z])'
        )
        
        with open(bridge_file, 'w') as f:
            f.write(bridge_content)
        
        print("‚úÖ OSC actualizado para enviar x,y,z")

print("\\nüéØ SPHERE 3D DEBER√çA FUNCIONAR AHORA")
print("\\n‚ö†Ô∏è NOTA: Este es un fix para la arquitectura ACTUAL")
print("La arquitectura correcta requiere refactorizaci√≥n completa")
'''
    
    with open("fix_sphere_respecting_current_architecture.py", 'w') as f:
        f.write(fix_content)

if __name__ == "__main__":
    save_everything()
    
    print("\n\n" + "="*60)
    print("üß¨ DNA DEL PROYECTO ACTUALIZADO")
    print("="*60)
    
    print("\nüìã ARCHIVOS CREADOS:")
    print("  ‚Ä¢ PROJECT_DNA_IMMUTABLE.json - DNA completo e inmutable")
    print("  ‚Ä¢ PROJECT_STRUCTURE_ANALYSIS.json - An√°lisis detallado")
    print("  ‚Ä¢ fix_sphere_respecting_current_architecture.py - Fix para sphere")
    
    print("\n‚ö†Ô∏è IMPORTANTE PARA PR√ìXIMAS SESIONES:")
    print("  1. SIEMPRE cargar PROJECT_DNA_IMMUTABLE.json primero")
    print("  2. Respetar la arquitectura documentada")
    print("  3. No hacer cambios que violen las reglas")
    
    print("\nüîß PARA ARREGLAR SPHERE AHORA:")
    print("  python fix_sphere_respecting_current_architecture.py")