import os
import re

def diagnose_sphere():
    """Diagnosticar por qu√© sphere crea c√≠rculo 2D"""
    print("üîç DIAGN√ìSTICO: SPHERE CREANDO C√çRCULO")
    print("="*60)
    
    # 1. Buscar d√≥nde se procesa la formaci√≥n "sphere"
    print("\n1Ô∏è‚É£ BUSCANDO PROCESAMIENTO DE 'sphere'...")
    
    # Archivos clave
    files_to_check = [
        "trajectory_hub/control/processors/command_processor.py",
        "trajectory_hub/core/enhanced_trajectory_engine.py",
        "trajectory_hub/control/managers/formation_manager.py"
    ]
    
    sphere_processing = {}
    
    for filepath in files_to_check:
        if os.path.exists(filepath):
            print(f"\nüìÑ Analizando: {filepath}")
            
            with open(filepath, 'r') as f:
                content = f.read()
                lines = content.split('\n')
            
            # Buscar d√≥nde se procesa sphere
            for i, line in enumerate(lines):
                if 'sphere' in line and ('==' in line or 'case' in line or 'if' in line):
                    # Mostrar contexto
                    start = max(0, i-5)
                    end = min(len(lines), i+15)
                    
                    print(f"\n   üìç L√≠nea {i+1}: Procesamiento de sphere")
                    for j in range(start, end):
                        marker = ">>>" if j == i else "   "
                        print(f"   {marker} {j+1}: {lines[j]}")
                    
                    sphere_processing[filepath] = i+1
    
    # 2. Verificar si existe _calculate_sphere_positions
    print("\n\n2Ô∏è‚É£ VERIFICANDO M√âTODOS DE C√ÅLCULO...")
    
    for filepath in files_to_check:
        if os.path.exists(filepath):
            with open(filepath, 'r') as f:
                content = f.read()
            
            # Buscar m√©todos
            sphere_method = "_calculate_sphere_positions" in content or "_create_sphere_formation" in content
            circle_method = "_calculate_circle_positions" in content
            
            print(f"\nüìÑ {os.path.basename(filepath)}:")
            print(f"   {'‚úÖ' if sphere_method else '‚ùå'} Tiene m√©todo sphere")
            print(f"   {'‚úÖ' if circle_method else '‚ùå'} Tiene m√©todo circle")
            
            # Si tiene sphere, verificar si es 3D
            if sphere_method:
                if 'y = 1 -' in content and 'golden_angle' in content:
                    print("   ‚úÖ Implementaci√≥n parece ser 3D")
                else:
                    print("   ‚ùå Implementaci√≥n NO parece ser 3D")
    
    # 3. Buscar el problema espec√≠fico
    print("\n\n3Ô∏è‚É£ BUSCANDO EL PROBLEMA...")
    
    # Buscar en CommandProcessor c√≥mo maneja sphere
    cp_file = "trajectory_hub/control/processors/command_processor.py"
    if os.path.exists(cp_file):
        with open(cp_file, 'r') as f:
            content = f.read()
        
        # Buscar handle_create_macro
        handle_match = re.search(r'def handle_create_macro.*?(?=\n    def|\nclass|\Z)', content, re.DOTALL)
        
        if handle_match:
            method = handle_match.group(0)
            
            # Ver si sphere est√° siendo procesado
            if 'sphere' not in method:
                print("\n‚ùå PROBLEMA: handle_create_macro NO procesa sphere")
                print("   Sphere aparece en el men√∫ pero no en la l√≥gica")
                
                # Buscar c√≥mo se procesan las formaciones
                if 'formation_manager' in method.lower():
                    print("   ‚úÖ Usa FormationManager")
                    print("   ‚Üí Verificar FormationManager")
                elif 'engine' in method and 'create_macro' in method:
                    print("   ‚úÖ Delega a engine.create_macro")
                    print("   ‚Üí El problema est√° en engine")
    
    print("\n\n4Ô∏è‚É£ DIAGN√ìSTICO FINAL:")
    print("-" * 40)
    print("PROBLEMA: Sphere est√° en el men√∫ pero NO en la l√≥gica de procesamiento")
    print("CAUSA: El mapeo formation='sphere' no llega al m√©todo correcto")
    print("SOLUCI√ìN: Agregar el caso sphere donde se procesan las formaciones")

if __name__ == "__main__":
    diagnose_sphere()
    
    print("\n\nüí° PARA ARREGLAR MANUALMENTE:")
    print("1. Busca donde dice 'elif formation == \"random\"'")
    print("2. A√±ade despu√©s:")
    print('   elif formation == "sphere":')
    print('       positions = self._calculate_sphere_positions(...)')
    print("\nüîß O ejecuta: python fix_sphere_mapping.py")