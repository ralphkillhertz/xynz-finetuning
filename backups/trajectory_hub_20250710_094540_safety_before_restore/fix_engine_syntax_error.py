#!/usr/bin/env python3
"""
üîß Fix: Corrige error de sintaxis en enhanced_trajectory_engine.py
‚ö° Arregla: Error en l√≠nea 310 - m√©todo list_macros
üéØ Impacto: CR√çTICO - Sistema no arranca
"""

import os

def fix_syntax_error():
    """Corrige error de sintaxis en el Engine"""
    
    engine_path = 'trajectory_hub/core/enhanced_trajectory_engine.py'
    
    # Leer archivo
    with open(engine_path, 'r') as f:
        lines = f.readlines()
    
    # Buscar alrededor de la l√≠nea 310
    print("üîç Analizando l√≠neas 305-315...")
    for i in range(max(0, 305), min(len(lines), 315)):
        print(f"{i+1}: {lines[i].rstrip()}")
    
    # Buscar el problema espec√≠fico
    fixed = False
    for i in range(len(lines)):
        # Buscar si hay un m√©todo anterior sin cerrar
        if i < len(lines) - 1:
            current = lines[i].strip()
            next_line = lines[i+1].strip() if i+1 < len(lines) else ""
            
            # Si encontramos def list_macros sin nada antes cerrado
            if "def list_macros" in lines[i] and i > 0:
                # Verificar l√≠nea anterior
                prev_line = lines[i-1].strip()
                if prev_line and not prev_line.endswith(':') and prev_line != '':
                    # Probablemente falta cerrar algo
                    print(f"\n‚ö†Ô∏è Posible problema en l√≠nea {i}: falta cerrar m√©todo anterior")
                    
                    # Buscar hacia atr√°s el m√©todo anterior
                    for j in range(i-1, max(0, i-50), -1):
                        if 'def ' in lines[j] and j < i-1:
                            print(f"üìç M√©todo anterior encontrado en l√≠nea {j+1}")
                            
                            # Verificar si est√° bien cerrado
                            has_return = False
                            proper_indent = False
                            
                            for k in range(j+1, i):
                                if lines[k].strip().startswith('return') or lines[k].strip() == 'pass':
                                    has_return = True
                                if lines[k].strip() == '' and k == i-1:
                                    proper_indent = True
                            
                            if not has_return and not proper_indent:
                                # A√±adir l√≠nea vac√≠a antes de list_macros
                                print("üîß A√±adiendo l√≠nea vac√≠a para separar m√©todos")
                                lines.insert(i, '\n')
                                fixed = True
                            break
    
    # Si no encontramos el problema espec√≠fico, buscar otros patrones
    if not fixed:
        print("\nüîç Buscando otros problemas de sintaxis...")
        
        # Verificar par√©ntesis y llaves no cerradas
        for i in range(min(310, len(lines))):
            line = lines[i]
            # Contar par√©ntesis
            open_parens = line.count('(') - line.count(')')
            open_brackets = line.count('[') - line.count(']')
            open_braces = line.count('{') - line.count('}')
            
            if open_parens > 0 or open_brackets > 0 or open_braces > 0:
                print(f"‚ö†Ô∏è L√≠nea {i+1} tiene par√©ntesis/corchetes no cerrados")
                
                # Si es cerca de la l√≠nea 310, intentar arreglar
                if 305 <= i <= 310:
                    if open_parens > 0:
                        lines[i] = lines[i].rstrip() + ')' * open_parens + '\n'
                    fixed = True
    
    # Verificar indentaci√≥n espec√≠fica
    if not fixed:
        for i in range(len(lines)):
            if "def list_macros" in lines[i]:
                # Asegurar que tiene la indentaci√≥n correcta (4 espacios)
                if not lines[i].startswith('    def'):
                    print(f"üîß Arreglando indentaci√≥n de list_macros")
                    lines[i] = '    def list_macros(self) -> dict:\n'
                    fixed = True
                break
    
    # Guardar cambios si se hizo alg√∫n fix
    if fixed:
        # Backup
        backup_path = f"{engine_path}.backup_syntax_fix"
        with open(backup_path, 'w') as f:
            f.writelines(lines)
        
        # Escribir archivo corregido
        with open(engine_path, 'w') as f:
            f.writelines(lines)
        
        print(f"\n‚úÖ Sintaxis corregida")
        print(f"üìÅ Backup: {backup_path}")
    else:
        print("\n‚ùå No se pudo identificar el problema autom√°ticamente")
        print("üîß Intentando fix manual...")
        
        # Fix manual: buscar y reemplazar l√≠nea espec√≠fica
        for i in range(len(lines)):
            if "def list_macros(self) -> dict:" in lines[i]:
                # Cambiar a versi√≥n sin type hint
                lines[i] = "    def list_macros(self):\n"
                
                # Guardar
                backup_path = f"{engine_path}.backup_syntax_fix_manual"
                with open(backup_path, 'w') as f:
                    f.writelines(lines)
                
                with open(engine_path, 'w') as f:
                    f.writelines(lines)
                
                print("‚úÖ Type hint removido de list_macros")
                fixed = True
                break
    
    return fixed

if __name__ == "__main__":
    if fix_syntax_error():
        print("\nüéØ Pr√≥ximo paso: python check_current_implementation.py")
    else:
        print("\n‚ö†Ô∏è Revisa manualmente enhanced_trajectory_engine.py l√≠nea 310")