#!/usr/bin/env python3
"""
üîç VERIFICAR FIRMAS DE UPDATE()
"""

import inspect
import os
import sys

current_dir = os.getcwd()
if 'trajectory_hub' in current_dir:
    parent_dir = os.path.dirname(current_dir)
    sys.path.insert(0, parent_dir)

print("""
================================================================================
üîç VERIFICANDO FIRMAS DE UPDATE()
================================================================================
""")

# Suprimir warnings
os.environ['DISABLE_OSC'] = '1'

try:
    # 1. Verificar EnhancedTrajectoryEngine.update()
    print("1Ô∏è‚É£ EnhancedTrajectoryEngine.update():")
    print("-" * 50)
    
    from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine
    
    # Obtener firma
    sig = inspect.signature(EnhancedTrajectoryEngine.update)
    print(f"   Firma: {sig}")
    
    # Ver el c√≥digo fuente (primeras l√≠neas)
    try:
        source = inspect.getsource(EnhancedTrajectoryEngine.update)
        lines = source.split('\n')[:5]
        print("   C√≥digo:")
        for line in lines:
            print(f"      {line}")
    except:
        print("   No se pudo obtener el c√≥digo fuente")
    
    # 2. Verificar SourceMotion.update()
    print("\n2Ô∏è‚É£ SourceMotion.update():")
    print("-" * 50)
    
    from trajectory_hub.core.motion_components import SourceMotion
    
    sig = inspect.signature(SourceMotion.update)
    print(f"   Firma: {sig}")
    
    try:
        source = inspect.getsource(SourceMotion.update)
        lines = source.split('\n')[:5]
        print("   C√≥digo:")
        for line in lines:
            print(f"      {line}")
    except:
        print("   No se pudo obtener el c√≥digo fuente")

except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()

# 3. Buscar en el archivo directamente
print("\n3Ô∏è‚É£ B√öSQUEDA DIRECTA EN enhanced_trajectory_engine.py:")
print("-" * 50)

engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"
if os.path.exists(engine_file):
    with open(engine_file, 'r') as f:
        lines = f.readlines()
    
    # Buscar def update(
    for i, line in enumerate(lines):
        if 'def update(' in line and not line.strip().startswith('#'):
            print(f"   L√≠nea {i+1}: {line.strip()}")
            # Mostrar las siguientes 3 l√≠neas
            for j in range(1, 4):
                if i+j < len(lines):
                    print(f"   L√≠nea {i+j+1}: {lines[i+j].rstrip()}")
            break

print("\n" + "="*70)
print("üìã DIAGN√ìSTICO:")
print("="*70)

print("""
Si engine.update() no acepta par√°metros pero deber√≠a:
1. Necesitamos modificar EnhancedTrajectoryEngine.update()
2. O crear un wrapper que maneje el dt

Si engine.update() ya maneja dt internamente:
1. Los tests deben llamar engine.update() sin par√°metros
""")

# 4. Crear script de arreglo
fix_script = '''#!/usr/bin/env python3
"""
üîß ARREGLAR FIRMA DE ENGINE.UPDATE()
"""

import os
import re

print("üîß ARREGLANDO engine.update()...")

engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"

with open(engine_file, 'r') as f:
    content = f.read()

# Buscar def update(self):
if 'def update(self):' in content:
    print("‚úÖ Encontrado update(self), cambiando a update(self, dt=None)")
    content = content.replace('def update(self):', 'def update(self, dt=None):')
    
    # A√±adir manejo de dt si no existe
    lines = content.split('\\n')
    for i, line in enumerate(lines):
        if 'def update(self, dt=None):' in line:
            # Ver si las siguientes l√≠neas manejan dt
            if i+1 < len(lines) and 'if dt is None:' not in lines[i+1]:
                # Insertar manejo de dt
                indent = '        '
                lines.insert(i+1, f'{indent}if dt is None:')
                lines.insert(i+2, f'{indent}    dt = 1.0 / self.fps')
                break
    
    content = '\\n'.join(lines)
    
    # Guardar
    with open(engine_file, 'w') as f:
        f.write(content)
    
    print("‚úÖ engine.update() ahora acepta dt")
else:
    print("‚ùì No se encontr√≥ def update(self):")
    print("   Verificando manualmente...")
'''

with open("fix_engine_update_signature.py", 'w') as f:
    f.write(fix_script)
os.chmod("fix_engine_update_signature.py", 0o755)

print("\n‚úÖ Script de arreglo creado: fix_engine_update_signature.py")