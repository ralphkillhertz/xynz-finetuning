#!/usr/bin/env python3
"""
üî¨ AN√ÅLISIS PROFUNDO: Concentraci√≥n en Macros
üìã Objetivo: Entender por qu√© un macro sin movimiento no ejecuta concentraci√≥n
üéØ M√©todo: Rastrear todo el flujo desde creaci√≥n hasta movimiento
"""

import os
import sys
import numpy as np
from datetime import datetime

# Configurar para an√°lisis
os.environ['PYTHONPATH'] = os.getcwd()
sys.path.insert(0, os.getcwd())

def analyze_concentration_flow():
    """Analizar paso a paso el flujo de concentraci√≥n"""
    
    print("üî¨ AN√ÅLISIS PROFUNDO DE CONCENTRACI√ìN")
    print("=" * 70)
    
    from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine
    
    # 1. CREAR ENGINE Y MACRO
    print("\n1Ô∏è‚É£ CREACI√ìN DE ENGINE Y MACRO")
    print("-" * 50)
    
    engine = EnhancedTrajectoryEngine(max_sources=4, fps=60)
    print(f"‚úÖ Engine creado con {engine.max_sources} fuentes")
    
    # Verificar estado inicial
    print(f"\nüìä Estado inicial del engine:")
    print(f"   - _time: {engine._time}")
    print(f"   - _frame_count: {engine._frame_count}")
    print(f"   - running: {engine.running}")
    
    # Crear macro
    macro_id = engine.create_macro("test", source_count=4, formation="grid", spacing=4.0)
    print(f"\n‚úÖ Macro creado: {macro_id}")
    
    # 2. VERIFICAR ESTRUCTURA DEL MACRO
    print("\n2Ô∏è‚É£ ESTRUCTURA DEL MACRO")
    print("-" * 50)
    
    if macro_id in engine._macros:
        macro = engine._macros[macro_id]
        print(f"‚úÖ Macro encontrado en engine._macros")
        print(f"   - source_ids: {getattr(macro, 'source_ids', 'NO TIENE')}")
        print(f"   - concentration_factor: {getattr(macro, 'concentration_factor', 'NO TIENE')}")
        print(f"   - Tipo: {type(macro)}")
        print(f"   - Atributos: {[a for a in dir(macro) if not a.startswith('_')]}")
    else:
        print(f"‚ùå Macro NO encontrado en engine._macros")
        return
    
    # 3. APLICAR CONCENTRACI√ìN
    print("\n3Ô∏è‚É£ APLICAR CONCENTRACI√ìN")
    print("-" * 50)
    
    print("Llamando set_macro_concentration(macro_id, 0.5)...")
    engine.set_macro_concentration(macro_id, 0.5)
    
    # Verificar que se aplic√≥
    macro = engine._macros[macro_id]
    print(f"‚úÖ concentration_factor despu√©s: {getattr(macro, 'concentration_factor', 'NO TIENE')}")
    
    # 4. ANALIZAR M√âTODO STEP
    print("\n4Ô∏è‚É£ AN√ÅLISIS DEL M√âTODO STEP")
    print("-" * 50)
    
    # Verificar que step existe
    if hasattr(engine, 'step'):
        print("‚úÖ engine.step() existe")
        
        # Analizar el c√≥digo de step
        import inspect
        try:
            step_code = inspect.getsource(engine.step)
            print("\nüìú C√≥digo de step():")
            print("-" * 30)
            # Mostrar solo las primeras l√≠neas relevantes
            lines = step_code.split('\n')[:20]
            for i, line in enumerate(lines):
                if 'concentration' in line.lower() or 'macro' in line:
                    print(f"L{i}: {line}")
        except:
            print("‚ùå No se pudo obtener el c√≥digo de step()")
    else:
        print("‚ùå engine.step() NO existe")
        # Buscar update
        if hasattr(engine, 'update'):
            print("‚ö†Ô∏è Pero engine.update() S√ç existe")
    
    # 5. EJECUTAR UN FRAME Y RASTREAR
    print("\n5Ô∏è‚É£ EJECUCI√ìN DE UN FRAME")
    print("-" * 50)
    
    # Guardar posiciones iniciales
    initial_positions = engine._positions[:4].copy()
    print(f"Posiciones iniciales: {initial_positions}")
    
    # Intentar ejecutar step
    try:
        if hasattr(engine, 'step'):
            result = engine.step()
            print("‚úÖ step() ejecutado")
            if result:
                print(f"   Resultado: {type(result)}")
        elif hasattr(engine, 'update'):
            engine.update(1/60)
            print("‚úÖ update() ejecutado")
    except Exception as e:
        print(f"‚ùå Error ejecutando step/update: {e}")
    
    # Verificar cambios
    final_positions = engine._positions[:4]
    movement = np.sum(np.abs(final_positions - initial_positions))
    print(f"\nPosiciones finales: {final_positions}")
    print(f"Movimiento total: {movement}")
    
    # 6. BUSCAR D√ìNDE SE APLICA LA CONCENTRACI√ìN
    print("\n6Ô∏è‚É£ B√öSQUEDA DE APLICACI√ìN DE CONCENTRACI√ìN")
    print("-" * 50)
    
    # Buscar en el c√≥digo d√≥nde se usa concentration_factor
    engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"
    if os.path.exists(engine_file):
        with open(engine_file, 'r') as f:
            content = f.read()
        
        lines = content.split('\n')
        concentration_lines = []
        
        for i, line in enumerate(lines):
            if 'concentration_factor' in line and 'def' not in line:
                concentration_lines.append((i+1, line.strip()))
        
        print(f"Encontradas {len(concentration_lines)} l√≠neas con 'concentration_factor':")
        for line_no, line in concentration_lines[:5]:
            print(f"   L{line_no}: {line}")
    
    # 7. DIAGN√ìSTICO
    print("\n7Ô∏è‚É£ DIAGN√ìSTICO")
    print("-" * 50)
    
    problems = []
    
    if not hasattr(engine, 'step'):
        problems.append("step() no existe - el controlador no puede ejecutar frames")
    
    if movement == 0:
        problems.append("No hay movimiento - la concentraci√≥n no se est√° aplicando")
    
    if not hasattr(macro, 'concentration_factor'):
        problems.append("El macro no tiene concentration_factor")
    
    # Buscar si step() tiene c√≥digo de concentraci√≥n
    if hasattr(engine, 'step'):
        step_code = inspect.getsource(engine.step)
        if 'concentration' not in step_code.lower():
            problems.append("step() no contiene c√≥digo de concentraci√≥n")
    
    if problems:
        print("‚ùå PROBLEMAS ENCONTRADOS:")
        for p in problems:
            print(f"   - {p}")
    else:
        print("‚úÖ No se encontraron problemas obvios")
    
    # 8. POSIBLES CAUSAS
    print("\n8Ô∏è‚É£ AN√ÅLISIS DE CAUSAS PROBABLES")
    print("-" * 50)
    
    print("CAUSA 1: step() no llama al c√≥digo de concentraci√≥n")
    print("   - El m√©todo step() puede existir pero no incluir la l√≥gica")
    print("   - La concentraci√≥n puede estar en update() pero no en step()")
    
    print("\nCAUSA 2: La concentraci√≥n requiere otro componente activo")
    print("   - Puede necesitar que haya una trayectoria activa")
    print("   - Puede estar condicionada a otro estado")
    
    print("\nCAUSA 3: El factor de concentraci√≥n no se guarda correctamente")
    print("   - set_macro_concentration() puede no estar guardando el valor")
    print("   - El macro puede resetearse despu√©s")
    
    print("\nCAUSA 4: Error en el c√°lculo de posiciones")
    print("   - La f√≥rmula puede estar mal")
    print("   - El dt puede ser 0 o muy peque√±o")

def create_minimal_test():
    """Crear test m√≠nimo para verificar"""
    
    print("\n\n9Ô∏è‚É£ TEST M√çNIMO DE VERIFICACI√ìN")
    print("=" * 70)
    
    test_code = '''
# Test m√≠nimo de concentraci√≥n
from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine
import numpy as np

engine = EnhancedTrajectoryEngine(max_sources=4)
macro_id = engine.create_macro("test", source_count=4)

# Verificar estructura
macro = engine._macros[macro_id]
print(f"Macro tipo: {type(macro)}")
print(f"Tiene concentration_factor: {hasattr(macro, 'concentration_factor')}")

# Aplicar concentraci√≥n
engine.set_macro_concentration(macro_id, 0.8)
print(f"Factor aplicado: {getattr(macro, 'concentration_factor', 'NO TIENE')}")

# Buscar d√≥nde se ejecuta
if hasattr(engine, 'step'):
    print("‚úÖ Tiene step()")
    # Ver si step llama a algo m√°s
    import inspect
    code = inspect.getsource(engine.step)
    if 'update' in code:
        print("   step() llama a update()")
    if 'concentration' in code.lower():
        print("   step() contiene l√≥gica de concentraci√≥n")
else:
    print("‚ùå NO tiene step()")
    
# Intentar movimiento manual
if hasattr(engine, '_apply_concentration'):
    print("‚úÖ Tiene _apply_concentration()")
elif hasattr(engine, 'apply_concentration'):
    print("‚úÖ Tiene apply_concentration()")
else:
    print("‚ùå No tiene m√©todo de aplicar concentraci√≥n")
'''
    
    print(test_code)

def main():
    analyze_concentration_flow()
    create_minimal_test()
    
    print("\n" + "="*70)
    print("üéØ CONCLUSI√ìN")
    print("=" * 70)
    print("\nLa concentraci√≥n probablemente no funciona porque:")
    print("1. step() no incluye la l√≥gica de concentraci√≥n")
    print("2. La l√≥gica est√° en update() pero el controlador llama a step()")
    print("3. Falta conectar set_macro_concentration() con el sistema de movimiento")
    print("\nüí° SOLUCI√ìN PROPUESTA:")
    print("Implementar step() que:")
    print("1. Llame a update() si existe")
    print("2. Aplique la concentraci√≥n despu√©s")
    print("3. Devuelva el estado para el controlador")

if __name__ == "__main__":
    main()