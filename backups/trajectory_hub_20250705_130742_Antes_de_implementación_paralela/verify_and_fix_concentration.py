#!/usr/bin/env python3
"""
verify_and_fix_concentration.py - Verifica y corrige la integraci√≥n de concentraci√≥n
"""

import os
import inspect

def check_engine_methods():
    """Verificar qu√© m√©todos tiene realmente EnhancedTrajectoryEngine"""
    print("üîç VERIFICANDO M√âTODOS DEL ENGINE...\n")
    
    try:
        from trajectory_hub import EnhancedTrajectoryEngine
        
        engine = EnhancedTrajectoryEngine()
        
        # Listar todos los m√©todos
        methods = [method for method in dir(engine) if not method.startswith('_')]
        
        print("M√©todos p√∫blicos disponibles:")
        for method in sorted(methods):
            print(f"  - {method}")
        
        # Buscar m√©todos de concentraci√≥n
        concentration_methods = [m for m in methods if 'concentration' in m.lower()]
        
        if concentration_methods:
            print(f"\n‚úÖ M√©todos de concentraci√≥n encontrados: {concentration_methods}")
        else:
            print("\n‚ùå No se encontraron m√©todos de concentraci√≥n")
            
        # Verificar set_macro_trajectory
        if hasattr(engine, 'set_macro_trajectory'):
            sig = inspect.signature(engine.set_macro_trajectory)
            print(f"\nüìù Firma de set_macro_trajectory: {sig}")
        
        return concentration_methods
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return []

def check_file_content():
    """Verificar el contenido del archivo enhanced_trajectory_engine.py"""
    print("\n\nüîç VERIFICANDO CONTENIDO DEL ARCHIVO...\n")
    
    filepath = "trajectory_hub/core/enhanced_trajectory_engine.py"
    
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Buscar m√©todos de concentraci√≥n
    if "def set_macro_concentration" in content:
        print("‚úÖ set_macro_concentration EST√Å en el archivo")
        
        # Encontrar la posici√≥n
        pos = content.find("def set_macro_concentration")
        # Mostrar contexto
        start = max(0, pos - 100)
        end = min(len(content), pos + 500)
        print("\nContexto:")
        print("-" * 60)
        print(content[start:end])
        print("-" * 60)
    else:
        print("‚ùå set_macro_concentration NO est√° en el archivo")
        
    # Buscar la clase
    class_start = content.find("class EnhancedTrajectoryEngine")
    if class_start != -1:
        # Ver cu√°ntos m√©todos hay despu√©s de los de concentraci√≥n
        conc_pos = content.find("def set_macro_concentration")
        if conc_pos > class_start:
            print(f"\nüìç Posiciones:")
            print(f"   - Clase empieza en: {class_start}")
            print(f"   - M√©todos de concentraci√≥n en: {conc_pos}")
            
            # Verificar si est√° dentro de la clase
            next_class = content.find("\nclass ", class_start + 1)
            if next_class == -1 or conc_pos < next_class:
                print("   ‚úÖ Los m√©todos est√°n dentro de la clase")
            else:
                print("   ‚ùå Los m√©todos est√°n FUERA de la clase")

def fix_method_indentation():
    """Corregir la indentaci√≥n de los m√©todos si es necesario"""
    print("\n\nüîß VERIFICANDO INDENTACI√ìN...\n")
    
    filepath = "trajectory_hub/core/enhanced_trajectory_engine.py"
    
    with open(filepath, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Buscar los m√©todos de concentraci√≥n
    concentration_start = -1
    for i, line in enumerate(lines):
        if "def set_macro_concentration" in line:
            concentration_start = i
            break
    
    if concentration_start != -1:
        # Verificar indentaci√≥n
        indent = len(lines[concentration_start]) - len(lines[concentration_start].lstrip())
        print(f"Indentaci√≥n encontrada: {indent} espacios")
        
        if indent == 0:
            print("‚ùå Los m√©todos no tienen indentaci√≥n - est√°n fuera de la clase")
            print("‚úÖ Corrigiendo indentaci√≥n...")
            
            # Encontrar donde termina la clase (antes del siguiente class o al final)
            class_end = len(lines)
            for i in range(concentration_start, len(lines)):
                if lines[i].startswith("class ") or (i > concentration_start and lines[i].strip() and not lines[i].startswith(" ")):
                    class_end = i
                    break
            
            # Indentar todos los m√©todos de concentraci√≥n
            for i in range(concentration_start, class_end):
                if lines[i].strip():  # No indentar l√≠neas vac√≠as
                    lines[i] = "    " + lines[i]
            
            # Guardar
            with open(filepath, 'w', encoding='utf-8') as f:
                f.writelines(lines)
                
            print("‚úÖ Indentaci√≥n corregida")
        elif indent == 4:
            print("‚úÖ La indentaci√≥n es correcta (4 espacios)")
        else:
            print(f"‚ö†Ô∏è  Indentaci√≥n inusual: {indent} espacios")

def create_working_test():
    """Crear un test que funcione con los m√©todos disponibles"""
    print("\n\nüìù CREANDO TEST FUNCIONAL...\n")
    
    test_code = '''#!/usr/bin/env python3
"""
test_concentration_working.py - Test adaptado a los m√©todos disponibles
"""

import numpy as np
from trajectory_hub import EnhancedTrajectoryEngine

def test_concentration():
    print("üß™ TEST ADAPTADO DEL SISTEMA DE CONCENTRACI√ìN\\n")
    
    # Crear engine
    engine = EnhancedTrajectoryEngine()
    
    # Crear macro
    print("1. Creando macro...")
    macro_id = engine.create_macro("test_concentration", 10, 
                                   formation="circle", spacing=2.0)
    print(f"   ‚úÖ Macro creado: {macro_id}")
    
    # Verificar m√©todos disponibles
    print("\\n2. M√©todos disponibles:")
    methods = [m for m in dir(engine) if 'concentration' in m.lower()]
    if methods:
        for m in methods:
            print(f"   - {m}")
    else:
        print("   ‚ùå No hay m√©todos de concentraci√≥n")
        print("\\n   Intentando acceso directo a componentes...")
        
        # Acceso directo a los componentes
        if hasattr(engine, '_source_motions'):
            print("   ‚úÖ Acceso a _source_motions disponible")
            
            # Obtener las fuentes del macro
            if hasattr(engine, '_macros') and macro_id in engine._macros:
                macro = engine._macros[macro_id]
                if hasattr(macro, 'source_ids'):
                    print(f"   ‚úÖ Macro tiene {len(macro.source_ids)} fuentes")
                    
                    # Configurar concentraci√≥n manualmente
                    from trajectory_hub.core.motion_components import ConcentrationComponent
                    
                    for sid in list(macro.source_ids)[:3]:  # Solo las primeras 3 para test
                        if sid in engine._source_motions:
                            motion = engine._source_motions[sid]
                            
                            # Agregar componente si no existe
                            if 'concentration' not in motion.components:
                                motion.components['concentration'] = ConcentrationComponent()
                            
                            # Configurar
                            conc = motion.components['concentration']
                            conc.enabled = True
                            conc.factor = 0.5
                            conc.target_point = np.array([0.0, 0.0, 0.0])
                            
                            print(f"   ‚úÖ Concentraci√≥n configurada para fuente {sid}")
    
    # Intentar actualizar
    print("\\n3. Probando updates...")
    try:
        for i in range(5):
            engine.update()
        print("   ‚úÖ Updates ejecutados sin errores")
    except Exception as e:
        print(f"   ‚ùå Error en update: {e}")
    
    print("\\n‚úÖ TEST COMPLETADO")
    print("\\nNOTA: Los m√©todos de concentraci√≥n pueden no estar disponibles.")
    print("Verifica que enhanced_trajectory_engine.py tiene los m√©todos correctamente indentados.")

if __name__ == "__main__":
    test_concentration()
'''
    
    with open("test_concentration_working.py", 'w', encoding='utf-8') as f:
        f.write(test_code)
    
    print("‚úÖ test_concentration_working.py creado")

def main():
    print("="*60)
    print("üîç VERIFICACI√ìN Y CORRECCI√ìN DE CONCENTRACI√ìN")
    print("="*60)
    
    # Verificar m√©todos
    methods = check_engine_methods()
    
    # Verificar archivo
    check_file_content()
    
    # Corregir si es necesario
    if not methods:
        fix_method_indentation()
        
        print("\nüîÑ Verificando nuevamente despu√©s de la correcci√≥n...")
        methods = check_engine_methods()
        
        if methods:
            print("\n‚úÖ CORRECCI√ìN EXITOSA")
        else:
            print("\n‚ö†Ô∏è  Los m√©todos siguen sin estar disponibles")
            print("Puede ser necesario reiniciar Python o revisar manualmente")
    
    # Crear test funcional
    create_working_test()
    
    print("\n" + "="*60)
    print("PR√ìXIMOS PASOS:")
    print("1. Si los m√©todos no aparecen, reinicia Python")
    print("2. Ejecuta: python test_concentration_working.py")
    print("3. Revisa manualmente enhanced_trajectory_engine.py")

if __name__ == "__main__":
    main()