#!/usr/bin/env python3
"""
fix_concentration_update.py - Corrige la cadena de updates para el sistema de concentraci√≥n
EJECUTAR ESTE SCRIPT PRIMERO antes de implementar la concentraci√≥n
"""

import os
import shutil
from datetime import datetime

def fix_update_chain():
    """Corregir el problema cr√≠tico de la cadena de updates"""
    
    print("üîß CORRECCI√ìN DE LA CADENA DE UPDATES\n")
    
    # 1. Backup del archivo
    engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"
    if not os.path.exists(engine_file):
        print("‚ùå No se encuentra enhanced_trajectory_engine.py")
        return False
        
    backup_name = f"{engine_file}.backup_concentration_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy(engine_file, backup_name)
    print(f"‚úÖ Backup creado: {backup_name}")
    
    # 2. Leer el archivo
    with open(engine_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 3. Buscar el m√©todo update
    update_method = '''    def update(self) -> bool:
        """
        Actualizar todas las fuentes y macros
        
        Returns
        -------
        bool
            True si la actualizaci√≥n fue exitosa
        """
        try:
            # Incrementar tiempo
            self._time += self.dt
            self._frame_count += 1'''
    
    # 4. Reemplazo con la versi√≥n corregida
    fixed_update = '''    def update(self) -> bool:
        """
        Actualizar todas las fuentes y macros
        
        Returns
        -------
        bool
            True si la actualizaci√≥n fue exitosa
        """
        try:
            # Incrementar tiempo
            self._time += self.dt
            self._frame_count += 1
            
            # CR√çTICO: Actualizar componentes de movimiento
            # Esto es lo que faltaba en las implementaciones anteriores
            for source_id, motion in self._source_motions.items():
                # Actualizar el sistema de componentes
                motion.update(self._time, self.dt)
                
                # Sincronizar posici√≥n con el array principal
                self._positions[source_id] = motion.state.position
                
                # Actualizar velocidades si est√° disponible
                if hasattr(self, '_velocities'):
                    self._velocities[source_id] = motion.state.velocity
                    
                # Actualizar orientaciones si est√° disponible
                if hasattr(self, '_orientations'):
                    self._orientations[source_id] = motion.state.orientation'''
    
    # 5. Aplicar el fix
    if update_method in content:
        # Encontrar donde termina el m√©todo actual
        start_idx = content.find(update_method)
        if start_idx != -1:
            # Buscar el final del m√©todo (siguiente def o final de clase)
            end_idx = content.find('\n    def ', start_idx + len(update_method))
            if end_idx == -1:
                end_idx = content.find('\nclass ', start_idx)
            if end_idx == -1:
                end_idx = len(content)
            
            # Extraer el m√©todo completo
            current_method = content[start_idx:end_idx]
            
            # Reemplazar solo la parte inicial del m√©todo
            new_content = content[:start_idx] + fixed_update + content[start_idx + len(update_method):]
            
            # Escribir el archivo
            with open(engine_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
                
            print("‚úÖ M√©todo update() corregido exitosamente")
            print("\nüìù Cambios aplicados:")
            print("   - Agregada llamada a motion.update()")
            print("   - Sincronizaci√≥n de arrays de posici√≥n")
            print("   - Manejo de velocidades y orientaciones")
            
            return True
    else:
        print("‚ö†Ô∏è  No se encontr√≥ el m√©todo update() esperado")
        print("    Aplicando parche alternativo...")
        
        # Buscar cualquier versi√≥n del m√©todo update
        alt_search = "def update(self"
        idx = content.find(alt_search)
        if idx != -1:
            # Insertar el c√≥digo de actualizaci√≥n despu√©s del frame_count
            insert_point = content.find("self._frame_count += 1", idx)
            if insert_point != -1:
                insert_point = content.find("\n", insert_point) + 1
                
                update_code = '''
            # CR√çTICO: Actualizar componentes de movimiento
            for source_id, motion in self._source_motions.items():
                # Actualizar el sistema de componentes
                motion.update(self._time, self.dt)
                
                # Sincronizar posici√≥n con el array principal
                self._positions[source_id] = motion.state.position
'''
                
                new_content = content[:insert_point] + update_code + content[insert_point:]
                
                with open(engine_file, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                    
                print("‚úÖ Parche alternativo aplicado")
                return True
                
    print("‚ùå No se pudo aplicar la correcci√≥n autom√°ticamente")
    print("   Por favor, agrega manualmente el siguiente c√≥digo en engine.update():")
    print("""
            # CR√çTICO: Actualizar componentes de movimiento
            for source_id, motion in self._source_motions.items():
                motion.update(self._time, self.dt)
                self._positions[source_id] = motion.state.position
    """)
    
    return False

def verify_update_chain():
    """Verificar que la cadena de updates funciona correctamente"""
    print("\nüîç VERIFICACI√ìN DE LA CADENA DE UPDATES\n")
    
    try:
        from trajectory_hub import EnhancedTrajectoryEngine
        
        # Crear engine de prueba
        engine = EnhancedTrajectoryEngine()
        
        # Crear una fuente
        engine.create_source(0, "test")
        
        # Verificar que motion existe
        if 0 not in engine._source_motions:
            print("‚ùå No se cre√≥ SourceMotion")
            return False
            
        motion = engine._source_motions[0]
        
        # Guardar posici√≥n inicial
        initial_pos = motion.state.position.copy()
        
        # Configurar una trayectoria simple
        if hasattr(engine, 'set_individual_trajectory'):
            engine.set_individual_trajectory(0, "circle", size=5.0)
            
        # Habilitar el movimiento
        if 'individual_trajectory' in motion.components:
            motion.components['individual_trajectory'].enabled = True
            motion.components['individual_trajectory'].movement_speed = 1.0
            
        # Actualizar varias veces
        positions = []
        for i in range(10):
            engine.update()
            positions.append(motion.state.position.copy())
            
        # Verificar que la posici√≥n cambi√≥
        position_changed = False
        for pos in positions:
            if not np.array_equal(pos, initial_pos):
                position_changed = True
                break
                
        if position_changed:
            print("‚úÖ La cadena de updates funciona correctamente")
            print(f"   - Posici√≥n inicial: {initial_pos}")
            print(f"   - Posici√≥n final: {positions[-1]}")
            print(f"   - SourceMotion.update() se est√° llamando")
            print(f"   - Los componentes se est√°n actualizando")
            return True
        else:
            print("‚ùå Las posiciones no cambiaron")
            print("   - SourceMotion.update() podr√≠a no estar siendo llamado")
            print("   - O los componentes no est√°n habilitados")
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante la verificaci√≥n: {e}")
        return False

def main():
    """Aplicar correcciones y verificar"""
    print("="*60)
    print("FIX PARA EL SISTEMA DE CONCENTRACI√ìN")
    print("="*60)
    
    # Aplicar correcci√≥n
    if fix_update_chain():
        print("\n" + "="*60)
        
        # Verificar
        import time
        time.sleep(1)  # Dar tiempo para que Python recargue el m√≥dulo
        
        import numpy as np  # Necesario para la verificaci√≥n
        verify_update_chain()
        
        print("\n‚úÖ SISTEMA LISTO PARA IMPLEMENTAR CONCENTRACI√ìN")
        print("\nPr√≥ximos pasos:")
        print("1. Ejecutar concentration_implementation.py")
        print("2. Integrar ConcentrationComponent en motion_components.py")
        print("3. Agregar m√©todos a enhanced_trajectory_engine.py")
        print("4. Actualizar interactive_controller.py con opci√≥n 31")
    else:
        print("\n‚ùå No se pudo aplicar la correcci√≥n autom√°ticamente")
        print("   Revisa el archivo manualmente")

if __name__ == "__main__":
    main()