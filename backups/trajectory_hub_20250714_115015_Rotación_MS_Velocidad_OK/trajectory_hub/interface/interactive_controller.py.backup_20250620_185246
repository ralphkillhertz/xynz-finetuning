"""
interactive_controller.py - Controlador principal del sistema interactivo (CORREGIDO)
"""

import os
import sys
from typing import Dict, List, Optional, Set, Tuple

import asyncio
import numpy as np
import time
import logging
from typing import Dict, List, Optional

# Imports principales con manejo de errores mejorado
try:
    # Intentar importar desde la estructura esperada del proyecto
    from trajectory_hub.presets.artistic_presets import (
        ARTISTIC_PRESETS, 
        TRAJECTORY_FUNCTIONS,
        TEMPORAL_COMPOSITIONS,
        STYLE_CONFIGS
    )
except ImportError as e:
    # Si falla, usar definiciones m√≠nimas de respaldo
    logging.warning(f"No se pudieron importar presets art√≠sticos: {e}")
    
    ARTISTIC_PRESETS = {
        "Demo B√°sico": {
            "description": "Configuraci√≥n b√°sica para pruebas",
            "macros": [{"name": "Grupo_Demo", "sources": 10, "behavior": "flock", "formation": "circle"}],
            "trajectories": {"Grupo_Demo": "circle"},
            "distances": {"Grupo_Demo": "personal"},
            "deformations": {"Grupo_Demo": [("breathing", 4.0, 1.0)]},
            "interactions": []
        }
    }
    
    TRAJECTORY_FUNCTIONS = {
        "circle": lambda t: np.array([5*np.cos(t*0.3), 5*np.sin(t*0.3), 0]),
        "spiral": lambda t: np.array([(3+0.1*t)*np.cos(t*0.5), (3+0.1*t)*np.sin(t*0.5), 0.2*t])
    }
    
    TEMPORAL_COMPOSITIONS = {
        "Demo Simple": {
            "description": "Composici√≥n de demostraci√≥n",
            "duration": "2 minutos",
            "dynamics": "Suave",
            "timeline": []
        }
    }
    
    STYLE_CONFIGS = {
        "Demo": {
            "behaviors": ["flock", "rigid"],
            "formations": ["circle", "line"],
            "trajectories": ["circle", "spiral"],
            "source_range": {"simple": (5, 15), "medium": (10, 25), "complex": (20, 50)},
            "preferred_distances": ["personal", "social"],
            "deformations": ["breathing"]
        }
    }

# Imports del n√∫cleo del sistema
try:
    from trajectory_hub import EnhancedTrajectoryEngine, SpatOSCBridge, OSCTarget
    from trajectory_hub.core import (
        TrajectoryMovementMode, TrajectoryDisplacementMode,
        CompositeDeformer, BlendMode
    )
    from trajectory_hub.core.distance_controller import TrajectoryDistanceAdjuster, DistanceController
except ImportError as e:
    logging.error(f"Error importando componentes del n√∫cleo: {e}")
    raise

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class

async def main():
    """Funci√≥n principal - VERSI√ìN CORREGIDA"""
    print("\n" + "="*60)
    print("üéÆ CONTROLADOR INTERACTIVO - TRAJECTORY HUB")
    print("="*60)
    
    try:
        # Crear instancia del controlador
        controller = InteractiveController()
        
        # Verificar inicializaci√≥n
        if not controller.engine:
            print("‚ùå Error: No se pudo inicializar el motor")
            return
            
        # Mostrar informaci√≥n del sistema
        controller.show_header()
        
        # Iniciar bucle principal
        await controller.run()
        
    except KeyboardInterrupt:
        print("\n\nüëã ¬°Hasta luego!")
    except Exception as e:
        print(f"\n‚ùå Error fatal: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # Asegurar limpieza
        try:
            if 'controller' in locals():
                controller.stop()
        except:
            pass

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
