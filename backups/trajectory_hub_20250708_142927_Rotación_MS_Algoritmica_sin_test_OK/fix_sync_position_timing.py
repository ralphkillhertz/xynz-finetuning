# === fix_sync_position_timing.py ===
# üîß Fix: Sincronizar ANTES de update_with_deltas
# ‚ö° ESTE ES EL FIX DEFINITIVO

import os

def fix_sync_timing():
    """Asegurar que la sincronizaci√≥n ocurra ANTES de update_with_deltas"""
    
    file_path = os.path.join("trajectory_hub", "core", "enhanced_trajectory_engine.py")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    print("üîç Buscando secci√≥n de procesamiento de deltas...")
    
    # Buscar las l√≠neas clave
    sync_line_idx = -1
    update_deltas_idx = -1
    
    for i, line in enumerate(lines):
        if 'motion.state.position = self._positions[source_id].copy()' in line:
            sync_line_idx = i
            print(f"üìç Sincronizaci√≥n encontrada en l√≠nea {i+1}")
        elif 'motion.update_with_deltas' in line:
            update_deltas_idx = i
            print(f"üìç update_with_deltas en l√≠nea {i+1}")
    
    if sync_line_idx > 0 and update_deltas_idx > 0:
        print(f"\nüìä Orden actual:")
        print(f"   Sincronizaci√≥n: l√≠nea {sync_line_idx+1}")
        print(f"   update_with_deltas: l√≠nea {update_deltas_idx+1}")
        
        if sync_line_idx > update_deltas_idx:
            print("‚ùå PROBLEMA: Sincronizaci√≥n ocurre DESPU√âS de calcular deltas")
            
            # Necesitamos mover la sincronizaci√≥n ANTES
            # Extraer las l√≠neas de sincronizaci√≥n
            sync_lines = []
            # Obtener la l√≠nea de sync y la anterior (el if)
            if 'if hasattr' in lines[sync_line_idx-1]:
                sync_lines.append(lines[sync_line_idx-1])
                sync_lines.append(lines[sync_line_idx])
                # Eliminar estas l√≠neas
                del lines[sync_line_idx]
                del lines[sync_line_idx-1]
            else:
                sync_lines.append(lines[sync_line_idx])
                del lines[sync_line_idx]
            
            # Encontrar d√≥nde insertarlas (justo despu√©s del for loop)
            for i, line in enumerate(lines):
                if 'for source_id, motion in self.motion_states.items():' in line:
                    # Insertar despu√©s del for
                    for j, sync_line in enumerate(sync_lines):
                        lines.insert(i+1+j, sync_line)
                    break
            
            # Guardar
            import shutil
            from datetime import datetime
            backup_name = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            shutil.copy2(file_path, backup_name)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            
            print("\n‚úÖ Sincronizaci√≥n movida ANTES de update_with_deltas")
            return True
        else:
            print("‚úÖ El orden ya es correcto")
            
            # Pero verificar que est√© DENTRO del loop
            # Mostrar contexto
            print("\nüìã Contexto:")
            for i in range(max(0, sync_line_idx-5), min(len(lines), sync_line_idx+5)):
                print(f"{i+1:4d}: {lines[i].rstrip()}")
                if i == sync_line_idx:
                    print("      ^^^ SINCRONIZACI√ìN")
    
    return False

if __name__ == "__main__":
    print("üîß Arreglando timing de sincronizaci√≥n...")
    
    if fix_sync_timing():
        print("\n‚úÖ Fix aplicado - AHORA S√ç DEFINITIVO")
        print("üìù Ejecuta: python test_macro_rotation_final_working.py")
        print("\nüéâ MacroRotation deber√≠a funcionar al 100%")
    else:
        print("\n‚ö†Ô∏è Verificar manualmente el orden")