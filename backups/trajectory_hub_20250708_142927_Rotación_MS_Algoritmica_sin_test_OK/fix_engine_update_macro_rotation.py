# === fix_engine_update_macro_rotation.py ===
# üîß Fix: Asegurar que engine.update() procese macro_rotation
# ‚ö° Impacto: CR√çTICO - Sin esto no hay movimiento

import os
import re

def fix_engine_update():
    """Asegurar que update() procese macro_rotation"""
    
    file_path = os.path.join("trajectory_hub", "core", "enhanced_trajectory_engine.py")
    
    # Leer archivo
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Buscar el m√©todo update
    print("üîç Buscando m√©todo update()...")
    
    # Buscar la secci√≥n donde se procesan deltas
    pattern = r'(def update\s*\(.*?\):.*?)(# Procesar deltas de todos los motion_states.*?)(for source_id, motion in self\.motion_states\.items\(\):.*?)(if motion\.state:.*?)(# Aplicar deltas a las posiciones)'
    
    def check_macro_rotation(content):
        """Verificar si macro_rotation est√° en la lista de componentes a procesar"""
        # Buscar donde se define qu√© componentes procesar
        if 'macro_rotation' in content:
            return True
        return False
    
    if not check_macro_rotation(content):
        print("‚ö†Ô∏è macro_rotation no est√° siendo procesado")
        
        # Buscar donde se procesan los componentes
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if 'components_to_process = [' in line or 'component_order = [' in line:
                print(f"üìç Encontrada lista de componentes en l√≠nea {i+1}")
                # Verificar las siguientes l√≠neas
                for j in range(i, min(i+10, len(lines))):
                    print(f"  {lines[j]}")
                    if ']' in lines[j]:
                        # Insertar macro_rotation si no est√°
                        if 'macro_rotation' not in content[lines[i]:lines[j]]:
                            # A√±adir macro_rotation antes del cierre
                            lines[j-1] = lines[j-1] + ",\n            'macro_rotation'"
                            print("‚úÖ A√±adido 'macro_rotation' a la lista")
                            content = '\n'.join(lines)
                        break
    
    # Si no encontramos una lista espec√≠fica, buscar el m√©todo update completo
    if 'def update' in content:
        # Buscar si procesa active_components
        update_section = re.search(r'def update\s*\([^)]*\):(.*?)(?=\n    def|\nclass|\Z)', content, re.DOTALL)
        
        if update_section:
            update_content = update_section.group(1)
            
            # Verificar si procesa active_components correctamente
            if 'active_components' in update_content and 'calculate_delta' in update_content:
                print("‚úÖ update() parece procesar componentes")
                
                # Verificar espec√≠ficamente macro_rotation
                if "'macro_rotation'" not in update_content:
                    print("‚ö†Ô∏è Pero no menciona espec√≠ficamente macro_rotation")
                    
                    # Buscar donde a√±adir el procesamiento
                    # T√≠picamente despu√©s de macro_trajectory
                    if "'macro_trajectory'" in update_content:
                        print("üìç A√±adiendo despu√©s de macro_trajectory")
                        content = content.replace(
                            "'macro_trajectory'",
                            "'macro_trajectory',\n                    'macro_rotation'"
                        )
            else:
                print("‚ùå update() no procesa active_components correctamente")
    
    # Verificar si se hizo alg√∫n cambio
    if content != open(file_path, 'r', encoding='utf-8').read():
        # Backup
        import shutil
        from datetime import datetime
        backup_name = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(file_path, backup_name)
        
        # Escribir
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Archivo actualizado")
        return True
    
    # Si no se hizo cambio, mostrar el m√©todo update actual
    print("\nüìã Mostrando m√©todo update() actual:")
    lines = content.split('\n')
    in_update = False
    update_lines = []
    
    for i, line in enumerate(lines):
        if 'def update' in line and '(self' in line:
            in_update = True
            indent = len(line) - len(line.lstrip())
        
        if in_update:
            update_lines.append(f"{i+1:4d}: {line}")
            
            # Si es otro m√©todo al mismo nivel, terminar
            if line.strip().startswith('def ') and len(line) - len(line.lstrip()) <= indent and 'def update' not in line:
                break
    
    # Mostrar solo las l√≠neas relevantes
    print("\n".join(update_lines[:50]))  # Primeras 50 l√≠neas
    
    return False

if __name__ == "__main__":
    print("üîß Verificando procesamiento de macro_rotation en update()...")
    
    if fix_engine_update():
        print("\n‚úÖ Fix aplicado")
        print("üìù Ejecuta: python test_macro_rotation_final_working.py")
    else:
        print("\n‚ö†Ô∏è Revisar manualmente el m√©todo update()")
        print("\nüí° Buscar donde dice 'components_to_process' o similar")
        print("   y a√±adir 'macro_rotation' a la lista")