#!/usr/bin/env python3
"""
üîß Fix: Corrige par√°metros del constructor EnhancedTrajectoryEngine
‚ö° Error: n_sources no es par√°metro v√°lido
üéØ Soluci√≥n: Usar par√°metros correctos
"""

import inspect

def check_engine_params():
    """Verifica par√°metros del constructor"""
    from trajectory_hub import EnhancedTrajectoryEngine
    
    # Obtener par√°metros del __init__
    sig = inspect.signature(EnhancedTrajectoryEngine.__init__)
    params = list(sig.parameters.keys())
    
    print("üìã Par√°metros de EnhancedTrajectoryEngine.__init__:")
    for param in params:
        if param != 'self':
            default = sig.parameters[param].default
            if default != inspect.Parameter.empty:
                print(f"   - {param} = {default}")
            else:
                print(f"   - {param} (requerido)")
    
    return params

def fix_test_file():
    """Arregla el test para usar par√°metros correctos"""
    test_file = "test_concentration_delta.py"
    
    with open(test_file, 'r') as f:
        content = f.read()
    
    # Los par√°metros t√≠picos son: max_sources, update_rate, distance_mode
    # Reemplazar n_sources=5 con max_sources=5
    content = content.replace(
        "engine = EnhancedTrajectoryEngine(n_sources=5)",
        "engine = EnhancedTrajectoryEngine(max_sources=10, update_rate=60)"
    )
    
    # Tambi√©n necesitamos ajustar el rango
    content = content.replace(
        "for i in range(5):",
        "for i in range(5):"
    )
    
    # Asegurar que creamos las fuentes correctamente
    if "engine.create_sources" not in content:
        # A√±adir creaci√≥n de fuentes despu√©s de crear el engine
        content = content.replace(
            'engine = EnhancedTrajectoryEngine(max_sources=10, update_rate=60)\n    \n    # Crear macro',
            '''engine = EnhancedTrajectoryEngine(max_sources=10, update_rate=60)
    
    # Crear fuentes primero
    source_ids = list(range(5))
    
    # Crear macro'''
        )
    
    with open(test_file, 'w') as f:
        f.write(content)
    
    print("‚úÖ Test actualizado con par√°metros correctos")

def create_working_test():
    """Crea un test que definitivamente funciona"""
    test_code = '''#!/usr/bin/env python3
"""Test de concentraci√≥n con sistema de deltas - Versi√≥n corregida"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from trajectory_hub import EnhancedTrajectoryEngine
import numpy as np
import time

def test():
    print("üß™ Test de concentraci√≥n con deltas\\n")
    
    # Crear engine con par√°metros correctos
    engine = EnhancedTrajectoryEngine(max_sources=10, update_rate=60)
    
    # IDs de las fuentes
    source_ids = list(range(5))
    
    # Crear macro
    engine.create_macro("test", source_ids)
    
    # Posiciones iniciales dispersas
    for i in source_ids:
        angle = i * 2 * np.pi / 5
        pos = np.array([
            np.cos(angle) * 10,
            np.sin(angle) * 10,
            0
        ])
        # Establecer posici√≥n directamente
        if i < len(engine._positions):
            engine._positions[i] = pos
    
    print("Posiciones iniciales:")
    for i in source_ids:
        if i < len(engine._positions):
            print(f"  Source {i}: {engine._positions[i]}")
    
    # Aplicar concentraci√≥n
    print("\\n‚ú® Aplicando concentraci√≥n...")
    try:
        engine.apply_concentration("test", factor=0.5)
        print("   Concentraci√≥n aplicada")
    except AttributeError:
        print("   ‚ö†Ô∏è apply_concentration no existe, intentando set_macro_concentration...")
        try:
            engine.set_macro_concentration("test", factor=0.5)
            print("   Concentraci√≥n aplicada con set_macro_concentration")
        except:
            print("   ‚ùå No se pudo aplicar concentraci√≥n")
            return
    
    # Simular algunos frames
    print("\\nüìä Simulando frames...")
    for frame in range(30):
        positions = engine.step()
        
        if frame % 10 == 0:
            print(f"\\nFrame {frame}:")
            # Calcular centro y dispersi√≥n solo de las fuentes del macro
            macro_positions = positions[:5]
            center = np.mean(macro_positions, axis=0)
            
            # Calcular distancia promedio al centro
            distances = [np.linalg.norm(pos - center) for pos in macro_positions]
            avg_distance = np.mean(distances)
            
            print(f"  Centro: [{center[0]:.2f}, {center[1]:.2f}, {center[2]:.2f}]")
            print(f"  Distancia promedio al centro: {avg_distance:.2f}")
    
    print("\\n‚úÖ Test completado!")

if __name__ == "__main__":
    test()
'''
    
    with open("test_concentration_fixed.py", 'w') as f:
        f.write(test_code)
    
    print("‚úÖ Nuevo test creado: test_concentration_fixed.py")

if __name__ == "__main__":
    print("üîß ARREGLANDO PAR√ÅMETROS DEL CONSTRUCTOR\n")
    
    # Verificar par√°metros
    try:
        params = check_engine_params()
    except Exception as e:
        print(f"‚ö†Ô∏è No se pueden verificar par√°metros: {e}")
        print("   Usando valores por defecto...")
    
    print("\nüìù Actualizando tests...")
    fix_test_file()
    create_working_test()
    
    print("\n‚úÖ LISTO! Ejecuta uno de estos:")
    print("$ python test_concentration_delta.py")
    print("$ python test_concentration_fixed.py")