#!/usr/bin/env python3
"""
üîß Fix: Arregla create_source para inicializar componentes correctamente
‚ö° Error: KeyError: 'individual_trajectory'
üéØ Soluci√≥n: Inicializar componentes al crear SourceMotion
"""

import re

def fix_create_source():
    """Arregla create_source para que inicialice los componentes"""
    print("üîß Arreglando create_source en EnhancedTrajectoryEngine...\n")
    
    engine_file = "trajectory_hub/core/enhanced_trajectory_engine.py"
    
    with open(engine_file, 'r') as f:
        content = f.read()
    
    # Buscar el m√©todo create_source
    create_source_pattern = r'(def create_source\(.*?\):.*?)(return True)'
    match = re.search(create_source_pattern, content, re.DOTALL)
    
    if not match:
        print("‚ùå No se encuentra create_source")
        return False
    
    method_content = match.group(1)
    
    # Buscar donde se crea SourceMotion
    if 'SourceMotion(' in method_content:
        print("‚úÖ Encontrado SourceMotion en create_source")
        
        # Reemplazar la parte problem√°tica
        new_method = method_content
        
        # Primero, buscar y reemplazar la l√≠nea problem√°tica
        old_line = "motion.components['individual_trajectory'].enabled = False"
        
        new_code = '''# Inicializar componentes necesarios
        from trajectory_hub.core.motion_components import IndividualTrajectory, OrientationModulation
        
        # Crear componentes si no existen
        if 'individual_trajectory' not in motion.components:
            motion.components['individual_trajectory'] = IndividualTrajectory()
            motion.add_component(motion.components['individual_trajectory'], 'individual_trajectory')
        
        if 'orientation_modulation' not in motion.components:
            motion.components['orientation_modulation'] = OrientationModulation()
            motion.add_component(motion.components['orientation_modulation'], 'orientation_modulation')
        
        # Ahora s√≠ podemos desactivar
        motion.components['individual_trajectory'].enabled = False'''
        
        new_method = new_method.replace(old_line, new_code)
        
        # Reconstruir el m√©todo completo
        new_content = content.replace(match.group(0), new_method + match.group(2))
        
        with open(engine_file, 'w') as f:
            f.write(new_content)
        
        print("‚úÖ create_source actualizado")
        return True
    
    return False

def add_orientation_modulation_if_missing():
    """A√±ade OrientationModulation si no existe"""
    print("\nüîç Verificando OrientationModulation...")
    
    motion_file = "trajectory_hub/core/motion_components.py"
    
    with open(motion_file, 'r') as f:
        content = f.read()
    
    if 'class OrientationModulation' not in content:
        print("‚ö†Ô∏è Falta OrientationModulation - a√±adiendo...")
        
        orientation_modulation = '''

class OrientationModulation(MotionComponent):
    """Modulaci√≥n de orientaci√≥n b√°sica"""
    
    def __init__(self):
        super().__init__()
        self.enabled = False
        self.yaw = 0.0
        self.pitch = 0.0
        self.roll = 0.0
        
    def update(self, state: MotionState, current_time: float, dt: float) -> MotionState:
        """Actualiza orientaci√≥n"""
        if not self.enabled:
            return state
            
        # Por ahora, sin cambios
        return state
'''
        
        content += orientation_modulation
        
        with open(motion_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ OrientationModulation a√±adido")

def create_simpler_test():
    """Crea un test m√°s simple que evite create_source"""
    test_code = '''#!/usr/bin/env python3
"""Test simplificado que evita problemas con create_source"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import numpy as np
from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine
from trajectory_hub.core.motion_components import SourceMotion, ConcentrationComponent

print("üß™ TEST SIMPLIFICADO DEL SISTEMA DE DELTAS\\n")

# Crear engine
engine = EnhancedTrajectoryEngine(max_sources=5, fps=60)
print("‚úÖ Engine creado")

# Crear macro SIN usar create_source
source_ids = [0, 1, 2]
from trajectory_hub.core.enhanced_trajectory_engine import Macro

# Crear macro directamente
macro = Macro("test", source_ids)
engine._macros["test"] = macro
print("‚úÖ Macro creado directamente")

# Crear motion states manualmente
for sid in source_ids:
    engine.motion_states[sid] = SourceMotion(sid)
print(f"‚úÖ Motion states creados: {list(engine.motion_states.keys())}")

# Posiciones iniciales
for i in source_ids:
    angle = i * 2 * np.pi / 3
    engine._positions[i] = np.array([np.cos(angle) * 10, np.sin(angle) * 10, 0])

print("\\nüìç Posiciones iniciales:")
for i in source_ids:
    pos = engine._positions[i]
    print(f"   Source {i}: [{pos[0]:.2f}, {pos[1]:.2f}, {pos[2]:.2f}]")

# Distancia inicial
center = np.mean([engine._positions[i] for i in source_ids], axis=0)
dist_inicial = np.mean([np.linalg.norm(engine._positions[i] - center) for i in source_ids])
print(f"\\nüìè Distancia inicial al centro: {dist_inicial:.2f}")

# Aplicar concentraci√≥n
print("\\nüéØ Aplicando concentraci√≥n...")
try:
    # Manualmente a√±adir ConcentrationComponent
    for sid in source_ids:
        motion = engine.motion_states[sid]
        conc = ConcentrationComponent(macro)
        conc.enabled = True
        conc.concentration_factor = 0.8
        conc.macro_center = center
        motion.add_component(conc)
    
    print("‚úÖ Concentraci√≥n configurada manualmente")
except Exception as e:
    print(f"‚ùå Error: {e}")

# Simular
print("\\nüîÑ Simulando 20 frames...")
for frame in range(20):
    engine.step()
    
    if frame % 5 == 0:
        center = np.mean([engine._positions[i] for i in source_ids], axis=0)
        dist = np.mean([np.linalg.norm(engine._positions[i] - center) for i in source_ids])
        print(f"   Frame {frame}: distancia = {dist:.2f}")

# Resultado final
center_final = np.mean([engine._positions[i] for i in source_ids], axis=0)
dist_final = np.mean([np.linalg.norm(engine._positions[i] - center_final) for i in source_ids])

print(f"\\nüìä Resultado:")
print(f"   Distancia inicial: {dist_inicial:.2f}")
print(f"   Distancia final:   {dist_final:.2f}")
print(f"   Cambio:           {dist_final - dist_inicial:.2f}")

if dist_final < dist_inicial:
    print("\\n‚úÖ ¬°Las fuentes se est√°n concentrando!")
else:
    print("\\n‚ùå Las fuentes NO se est√°n concentrando")
'''
    
    with open("test_delta_simple_manual.py", 'w') as f:
        f.write(test_code)
    
    print("\n‚úÖ Test simplificado creado: test_delta_simple_manual.py")

def main():
    print("üîß FIX DE CREATE_SOURCE Y COMPONENTES")
    print("=" * 60)
    
    # 1. Arreglar create_source
    if fix_create_source():
        print("\n‚úÖ create_source arreglado")
    else:
        print("\n‚ö†Ô∏è No se pudo arreglar create_source autom√°ticamente")
    
    # 2. A√±adir componentes faltantes
    add_orientation_modulation_if_missing()
    
    # 3. Crear test alternativo
    create_simpler_test()
    
    print("\nüìã Opciones:")
    print("1. Intenta el test original:")
    print("   $ python test_delta_concentration_final.py")
    print("\n2. O usa el test simplificado:")
    print("   $ python test_delta_simple_manual.py")

if __name__ == "__main__":
    main()