#!/usr/bin/env python3
"""
üö® FIX CR√çTICO: Aplicar deltas acumulados
El problema es que los deltas se calculan pero nunca se aplican
"""

import os
import shutil
from datetime import datetime
import re

print("=" * 80)
print("üö® FIX CR√çTICO: APLICACI√ìN DE DELTAS")
print("=" * 80)

# Buscar d√≥nde se hace el update principal
print("\n1Ô∏è‚É£ BUSCANDO D√ìNDE APLICAR DELTAS...")

# Posibles archivos donde el engine hace update
candidates = [
    "trajectory_hub/core/enhanced_trajectory_engine.py",
    "trajectory_hub/core/trajectory_engine.py",
    "trajectory_hub/core/engine.py",
    "trajectory_hub/core/spatial_engine.py"
]

engine_file = None
for candidate in candidates:
    if os.path.exists(candidate):
        engine_file = candidate
        print(f"‚úÖ Encontrado: {engine_file}")
        break

if not engine_file:
    print("‚ùå No se encontr√≥ el archivo del engine")
    exit(1)

# Backup
backup_dir = f"fix_deltas_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
os.makedirs(backup_dir, exist_ok=True)
shutil.copy2(engine_file, os.path.join(backup_dir, os.path.basename(engine_file)))
print(f"‚úÖ Backup: {backup_dir}")

# Leer archivo
with open(engine_file, 'r') as f:
    content = f.read()

# Buscar el m√©todo update principal
print("\n2Ô∏è‚É£ BUSCANDO M√âTODO UPDATE...")

# Buscar d√≥nde se actualizan las posiciones de las fuentes
update_found = False
lines = content.split('\n')

# Buscar el patr√≥n donde se hace source.update o motion.update
for i, line in enumerate(lines):
    if 'motion.update(' in line or 'source.update(' in line:
        print(f"‚úÖ Update encontrado en l√≠nea {i+1}: {line.strip()[:60]}...")
        
        # Buscar el contexto para insertar la aplicaci√≥n de deltas
        # Necesitamos insertar DESPU√âS del update pero ANTES de enviar a Spat
        
        # Buscar hacia adelante para encontrar d√≥nde se env√≠an las posiciones
        for j in range(i, min(i+50, len(lines))):
            if 'send_source_position' in lines[j] or '_send_positions' in lines[j]:
                print(f"   Env√≠o a Spat en l√≠nea {j+1}")
                
                # Insertar la aplicaci√≥n de deltas ANTES del env√≠o
                insert_line = j
                
                # Preparar el c√≥digo a insertar
                delta_application = """
        # APLICAR DELTAS ACUMULADOS (Arquitectura Paralela)
        if hasattr(self, '_apply_accumulated_deltas'):
            self._apply_accumulated_deltas()
        else:
            # Aplicaci√≥n directa si no existe el m√©todo
            try:
                from trajectory_hub.core.compatibility_v2 import compat_v2 as compat
                for i in range(self.num_sources):
                    if hasattr(self._source_motions[i], 'source_id'):
                        source_id = self._source_motions[i].source_id
                    else:
                        source_id = i
                    
                    # Obtener deltas acumulados
                    delta = compat.get_accumulated_delta(source_id)
                    if delta is not None:
                        # Aplicar delta a la posici√≥n
                        self._positions[i] += delta
                        # Limpiar deltas aplicados
                        compat.clear_deltas(source_id)
            except:
                pass  # Si falla, continuar sin deltas
"""
                
                # Obtener indentaci√≥n correcta
                indent = len(lines[j]) - len(lines[j].lstrip())
                indented_code = '\n'.join(' ' * indent + line for line in delta_application.strip().split('\n'))
                
                # Insertar
                lines.insert(insert_line, indented_code)
                update_found = True
                print(f"‚úÖ C√≥digo de aplicaci√≥n de deltas insertado en l√≠nea {insert_line}")
                break
        
        if update_found:
            break

if not update_found:
    print("‚ö†Ô∏è No se encontr√≥ el patr√≥n esperado, buscando alternativa...")
    
    # Buscar el m√©todo update del engine
    for i, line in enumerate(lines):
        if 'def update(' in line and 'self' in line:
            # Buscar el final del m√©todo
            method_indent = len(line) - len(line.lstrip())
            
            for j in range(i+1, len(lines)):
                # Buscar l√≠nea antes del return o final del m√©todo
                if (lines[j].strip().startswith('return') or 
                    (lines[j].strip() and len(lines[j]) - len(lines[j].lstrip()) <= method_indent)):
                    
                    # Insertar antes del return
                    insert_line = j - 1
                    
                    delta_code = """
    # Aplicar deltas acumulados antes de terminar update
    try:
        from trajectory_hub.core.compatibility_v2 import compat_v2 as compat
        for i in range(len(self._positions) if hasattr(self, '_positions') else 0):
            delta = compat.get_accumulated_delta(i)
            if delta is not None:
                self._positions[i] += delta
                compat.clear_deltas(i)
    except:
        pass
"""
                    
                    lines.insert(insert_line, delta_code)
                    update_found = True
                    print(f"‚úÖ Aplicaci√≥n de deltas agregada al final de update()")
                    break
            
            if update_found:
                break

# Escribir archivo modificado
if update_found:
    new_content = '\n'.join(lines)
    with open(engine_file, 'w') as f:
        f.write(new_content)
    
    print("\n‚úÖ ARCHIVO MODIFICADO EXITOSAMENTE")
else:
    print("\n‚ùå No se pudo encontrar d√≥nde insertar el c√≥digo")

# Crear m√©todo auxiliar
print("\n3Ô∏è‚É£ CREANDO M√âTODO AUXILIAR...")

helper_code = '''#!/usr/bin/env python3
"""
üîß M√©todo auxiliar para aplicar deltas
Agregar a EnhancedTrajectoryEngine si es necesario
"""

def _apply_accumulated_deltas(self):
    """Aplica todos los deltas acumulados a las posiciones"""
    try:
        from trajectory_hub.core.compatibility_v2 import compat_v2 as compat
        
        applied_count = 0
        for i in range(self.num_sources):
            # Obtener source_id
            if hasattr(self._source_motions[i], 'source_id'):
                source_id = self._source_motions[i].source_id
            else:
                source_id = i
            
            # Obtener delta acumulado
            delta = compat.get_accumulated_delta(source_id)
            
            if delta is not None:
                # Aplicar delta
                old_pos = self._positions[i].copy()
                self._positions[i] += delta
                
                # Log para debug
                if compat.config.get('LOG_DELTAS', False):
                    movement = np.linalg.norm(delta)
                    print(f"   [APPLIED] Source {source_id}: moved {movement:.4f}")
                
                # Limpiar delta aplicado
                compat.clear_deltas(source_id)
                applied_count += 1
        
        if applied_count > 0 and compat.config.get('LOG_DELTAS', False):
            print(f"   ‚úÖ Applied deltas to {applied_count} sources")
            
    except Exception as e:
        print(f"   ‚ùå Error applying deltas: {e}")

# Agregar este m√©todo a tu clase EnhancedTrajectoryEngine
'''

with open("delta_application_method.py", 'w') as f:
    f.write(helper_code)

print("‚úÖ M√©todo auxiliar creado: delta_application_method.py")

# Tambi√©n arreglar el problema de los deltas muy peque√±os
print("\n4Ô∏è‚É£ VERIFICANDO ANIMACI√ìN DE CONCENTRACI√ìN...")

motion_file = "trajectory_hub/core/motion_components.py"
if os.path.exists(motion_file):
    with open(motion_file, 'r') as f:
        motion_content = f.read()
    
    # Verificar si hay animaci√≥n activa
    if 'animation_active' in motion_content and 'animation_elapsed' in motion_content:
        print("‚úÖ Sistema de animaci√≥n detectado")
        print("   Los deltas peque√±os pueden ser debido a animaci√≥n gradual")
        print("   Esto es normal si est√° animando de factor 1.0 a 0.0")

print("\n" + "=" * 80)
print("RESUMEN:")
print("=" * 80)
print("1. ‚úÖ C√≥digo de aplicaci√≥n de deltas agregado al engine")
print("2. ‚úÖ Los deltas ahora deber√≠an aplicarse a las posiciones")
print("3. ‚ÑπÔ∏è  Los deltas peque√±os son normales si hay animaci√≥n")
print("\n‚ö° REINICIA EL CONTROLADOR para aplicar cambios")
print("=" * 80)