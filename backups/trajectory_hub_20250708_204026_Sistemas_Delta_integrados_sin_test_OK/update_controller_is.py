# === update_controller_is.py ===
# üîß Actualizar controlador interactivo con rotaciones IS
# ‚ö° A√±adir opciones al men√∫

import os
import re
from datetime import datetime

def update_controller():
    """A√±ade opciones de rotaci√≥n IS al controlador interactivo"""
    
    print("üîß ACTUALIZANDO CONTROLADOR INTERACTIVO")
    print("=" * 60)
    
    # Ruta del archivo
    file_path = "trajectory_hub/interface/interactive_controller.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå Error: No se encuentra {file_path}")
        return False
    
    # Backup
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{file_path}.backup_{timestamp}"
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"‚úÖ Backup creado: {backup_path}")
    
    # 1. A√±adir opciones al men√∫
    print("\nüîç A√±adiendo opciones al men√∫...")
    
    # Buscar d√≥nde a√±adir las opciones (despu√©s de las opciones de macro)
    menu_pattern = r'(print\("‚îÇ 10\. Toggle.*?‚îÇ"\))'
    
    menu_additions = '''
        
        # Rotaciones individuales
        print("\\nüîÑ ROTACIONES INDIVIDUALES (IS):")
        print("‚îÇ 30. Rotaci√≥n Algor√≠tmica IS    ‚îÇ Rotaci√≥n continua individual      ‚îÇ")
        print("‚îÇ 31. Rotaci√≥n Manual IS         ‚îÇ Rotar a √°ngulo espec√≠fico         ‚îÇ")
        print("‚îÇ 32. Batch Rotation IS          ‚îÇ Rotar m√∫ltiples fuentes           ‚îÇ")
        print("‚îÇ 33. Detener Rotaci√≥n IS        ‚îÇ Parar rotaci√≥n individual         ‚îÇ")'''
    
    # Insertar despu√©s de la l√≠nea encontrada
    match = re.search(menu_pattern, content)
    if match:
        insert_pos = match.end()
        # Buscar el siguiente print para mantener la estructura
        next_print = content.find('\n        print', insert_pos)
        if next_print > 0:
            content = content[:next_print] + menu_additions + content[next_print:]
            print("‚úÖ Opciones de men√∫ a√±adidas")
    
    # 2. A√±adir los casos en el m√©todo run()
    print("\nüîç A√±adiendo casos al m√©todo run()...")
    
    cases_code = '''
            elif choice == "30":
                # Rotaci√≥n algor√≠tmica individual
                try:
                    source_id = int(input("ID de fuente: "))
                    print("Velocidades de rotaci√≥n (rad/s):")
                    speed_x = float(input("  Velocidad X (default 0): ") or "0")
                    speed_y = float(input("  Velocidad Y (default 1.0): ") or "1.0")
                    speed_z = float(input("  Velocidad Z (default 0): ") or "0")
                    
                    if self.server.set_individual_rotation(source_id, speed_x, speed_y, speed_z):
                        print("‚úÖ Rotaci√≥n algor√≠tmica configurada")
                except Exception as e:
                    print(f"‚ùå Error: {e}")
            
            elif choice == "31":
                # Rotaci√≥n manual individual
                try:
                    source_id = int(input("ID de fuente: "))
                    print("√Ångulos objetivo (grados):")
                    yaw = math.radians(float(input("  Yaw (default 90): ") or "90"))
                    pitch = math.radians(float(input("  Pitch (default 0): ") or "0"))
                    roll = math.radians(float(input("  Roll (default 0): ") or "0"))
                    speed = float(input("Velocidad interpolaci√≥n (0.01-1.0, default 0.1): ") or "0.1")
                    
                    if self.server.set_manual_individual_rotation(source_id, yaw, pitch, roll, speed):
                        print("‚úÖ Rotaci√≥n manual configurada")
                except Exception as e:
                    print(f"‚ùå Error: {e}")
            
            elif choice == "32":
                # Batch rotation
                try:
                    ids_str = input("IDs de fuentes (separados por comas): ")
                    source_ids = [int(x.strip()) for x in ids_str.split(',')]
                    
                    print("Velocidades base (rad/s):")
                    speed_x = float(input("  Velocidad X (default 0): ") or "0")
                    speed_y = float(input("  Velocidad Y (default 0.5): ") or "0.5")
                    speed_z = float(input("  Velocidad Z (default 0): ") or "0")
                    offset = float(input("Factor desfase entre fuentes (default 0.1): ") or "0.1")
                    
                    count = self.server.set_batch_individual_rotation(source_ids, speed_x, speed_y, speed_z, offset)
                    print(f"‚úÖ Configuradas {count} fuentes")
                except Exception as e:
                    print(f"‚ùå Error: {e}")
            
            elif choice == "33":
                # Detener rotaci√≥n
                try:
                    source_id = int(input("ID de fuente: "))
                    rot_type = input("Tipo (algorithmic/manual/both, default both): ") or "both"
                    
                    if self.server.stop_individual_rotation(source_id, rot_type):
                        print("‚úÖ Rotaci√≥n detenida")
                except Exception as e:
                    print(f"‚ùå Error: {e}")'''
    
    # Buscar d√≥nde insertar (despu√©s del √∫ltimo elif)
    # Buscar el patr√≥n del √∫ltimo elif antes del else final
    pattern_elif = r'(elif choice == "\d+":[^}]+?)(?=\s*else:)'
    matches = list(re.finditer(pattern_elif, content, re.DOTALL))
    
    if matches:
        last_match = matches[-1]
        insert_pos = last_match.end()
        content = content[:insert_pos] + cases_code + content[insert_pos:]
        print("‚úÖ Casos a√±adidos al m√©todo run()")
    
    # 3. A√±adir import de math si no existe
    if 'import math' not in content:
        import_pattern = r'(import.*?\n)'
        content = re.sub(import_pattern, r'\1import math\n', content, count=1)
    
    # Escribir el archivo
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("\n‚úÖ Controlador actualizado con:")
    print("   - Opci√≥n 30: Rotaci√≥n algor√≠tmica IS")
    print("   - Opci√≥n 31: Rotaci√≥n manual IS")
    print("   - Opci√≥n 32: Batch rotation IS")
    print("   - Opci√≥n 33: Detener rotaci√≥n IS")
    
    return True

if __name__ == "__main__":
    update_controller()