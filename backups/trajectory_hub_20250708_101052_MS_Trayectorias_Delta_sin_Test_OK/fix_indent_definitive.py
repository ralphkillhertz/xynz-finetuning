# === fix_indent_definitive.py ===
# üîß Fix: Corregir TODA la indentaci√≥n del m√©todo create_macro
# ‚ö° Soluci√≥n definitiva

import os

print("üîß FIX DEFINITIVO: Corrigiendo toda la indentaci√≥n...\n")

file_path = "trajectory_hub/core/enhanced_trajectory_engine.py"

with open(file_path, 'r') as f:
    lines = f.readlines()

# Encontrar el m√©todo create_macro y corregir toda su indentaci√≥n
fixed_lines = []
in_create_macro = False
fixing = False

for i, line in enumerate(lines):
    # Detectar inicio del m√©todo
    if '    def create_macro(' in line:
        in_create_macro = True
        fixing = True
        fixed_lines.append(line)
        print(f"‚úÖ Encontrado create_macro en l√≠nea {i+1}")
        continue
    
    # Si estamos en create_macro
    if in_create_macro:
        # Si es una l√≠nea vac√≠a, mantenerla
        if line.strip() == '':
            fixed_lines.append(line)
            continue
            
        # Si empieza un nuevo m√©todo, terminar
        if line.strip().startswith('def ') and i > 256:
            in_create_macro = False
            fixing = False
            fixed_lines.append(line)
            continue
        
        # Corregir indentaci√≥n
        stripped = line.lstrip()
        
        # Calcular indentaci√≥n correcta
        if stripped.startswith('"""'):
            # Docstring: 12 espacios
            fixed_line = ' ' * 12 + stripped
        elif stripped.startswith('Parameters') or stripped.startswith('Returns'):
            # Secciones del docstring: 12 espacios
            fixed_line = ' ' * 12 + stripped
        elif stripped.startswith('---'):
            # Separadores del docstring: 12 espacios
            fixed_line = ' ' * 12 + stripped
        elif line.startswith('            ') and not line.startswith('                '):
            # Contenido del docstring con 12 espacios, mantener
            fixed_line = line
        elif line.startswith('        ') and not line.startswith('            '):
            # C√≥digo con 8 espacios, cambiar a 12
            fixed_line = '    ' + line  # A√±adir 4 espacios m√°s
        else:
            # Por defecto, asegurar al menos 12 espacios
            if stripped:
                fixed_line = ' ' * 12 + stripped
            else:
                fixed_line = line
        
        fixed_lines.append(fixed_line)
        
        # Debug para las primeras l√≠neas
        if i < 280:
            if line != fixed_line:
                print(f"  L√≠nea {i+1}: corregida")
    else:
        # Fuera de create_macro, mantener como est√°
        fixed_lines.append(line)

# Guardar
with open(file_path, 'w') as f:
    f.writelines(fixed_lines)

print("\n‚úÖ Archivo corregido completamente")

# Test final definitivo
print("\nüß™ TEST FINAL...")
import subprocess
result = subprocess.run(['python', 'test_macro_system_fixed.py'], 
                      capture_output=True, text=True)

if result.returncode == 0:
    # √âxito - mostrar resultados clave
    print("\n‚úÖ IMPORT EXITOSO")
    
    for line in result.stdout.split('\n'):
        if any(word in line for word in ['‚úÖ', '‚ùå', '√âXITO', 'TEST', 'Macro', 'Frame', 'distancia']):
            print(line)
    
    if "√âXITO TOTAL" in result.stdout:
        print("\n" + "="*60)
        print("üéâ ¬°MIGRACI√ìN COMPLETA!")
        print("="*60)
        print("\nüìä ESTADO FINAL DEL SISTEMA:")
        print("‚úÖ Sistema de deltas: 100%")
        print("‚úÖ ConcentrationComponent: 100%")
        print("‚úÖ IndividualTrajectory: 100%") 
        print("‚úÖ MacroTrajectory: 100%")
        print("‚úÖ engine.update(): Autom√°tico")
        print("\n‚è≠Ô∏è SIGUIENTE: Servidor MCP (CR√çTICO)")
else:
    # Error - mostrar detalles
    print(f"\n‚ùå Error: {result.stderr}")
    
    # Si sigue siendo error de indentaci√≥n, mostrar contexto
    if "IndentationError" in result.stderr:
        print("\nüîç Verificando l√≠nea problem√°tica...")
        import re
        match = re.search(r'line (\d+)', result.stderr)
        if match:
            line_num = int(match.group(1))
            print(f"\nContexto l√≠nea {line_num}:")
            for i in range(max(0, line_num-5), min(len(fixed_lines), line_num+5)):
                print(f"{i+1:3d}: {repr(fixed_lines[i])}")