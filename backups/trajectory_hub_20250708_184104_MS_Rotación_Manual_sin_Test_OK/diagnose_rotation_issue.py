# === diagnose_rotation_issue.py ===
# üîç Diagn√≥stico: Por qu√© las rotaciones manuales no funcionan
# ‚ö° Verificar cada paso del proceso de rotaci√≥n

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from trajectory_hub import EnhancedTrajectoryEngine
import numpy as np
import math

print("üîç DIAGN√ìSTICO: Rotaciones Manuales")
print("=" * 60)

# Crear engine simple
engine = EnhancedTrajectoryEngine(max_sources=2, fps=60, enable_modulator=False)

# Crear macro con solo 2 fuentes
macro_name = engine.create_macro("square", source_count=2)
macro = engine._macros[macro_name]
source_ids = list(macro.source_ids)

# Posiciones iniciales simples
positions = [
    np.array([3.0, 0.0, 0.0]),   # En el eje X positivo
    np.array([0.0, 3.0, 0.0])    # En el eje Y positivo
]

print("üìç Configurando posiciones iniciales:")
for sid, pos in zip(source_ids, positions):
    engine._positions[sid] = pos
    if sid in engine.motion_states:
        engine.motion_states[sid].state.position = pos.copy()
    print(f"   Fuente {sid}: {pos}")

# Configurar rotaci√≥n
print("\nüîß Configurando rotaci√≥n de 90 grados...")
engine.set_manual_macro_rotation(
    macro_name,
    yaw=math.pi/2,  # 90 grados
    pitch=0.0,
    roll=0.0,
    interpolation_speed=0.5  # Muy r√°pido para test
)

# Verificar que el componente existe
print("\nüîç Verificando componentes:")
for sid in source_ids:
    if sid in engine.motion_states:
        motion = engine.motion_states[sid]
        print(f"\n   Fuente {sid}:")
        print(f"   - motion_states existe: ‚úÖ")
        print(f"   - active_components: {list(motion.active_components.keys())}")
        
        if 'manual_macro_rotation' in motion.active_components:
            comp = motion.active_components['manual_macro_rotation']
            print(f"   - manual_macro_rotation existe: ‚úÖ")
            print(f"   - enabled: {comp.enabled}")
            print(f"   - target_yaw: {comp.target_yaw:.3f} rad ({math.degrees(comp.target_yaw):.1f}¬∞)")
            print(f"   - current_yaw: {comp.current_yaw:.3f} rad")
            print(f"   - center: {comp.center}")
            
            # Probar calculate_delta directamente
            print("\n   üß™ Probando calculate_delta directamente:")
            state = motion.state
            delta = comp.calculate_delta(state, 0.0, 1/60.0)
            if delta:
                print(f"   - Delta calculado: {delta.position}")
                print(f"   - Magnitud delta: {np.linalg.norm(delta.position):.6f}")
            else:
                print(f"   - Delta es None ‚ùå")
        else:
            print(f"   - manual_macro_rotation NO existe ‚ùå")

# Ejecutar UN solo update
print("\n‚öôÔ∏è Ejecutando UN update...")
old_positions = {sid: engine._positions[sid].copy() for sid in source_ids}

# Verificar qu√© hace engine.update()
print("\nüîç Rastreando engine.update():")
engine.update()

# Ver cambios
print("\nüìä Cambios despu√©s de update:")
for sid in source_ids:
    old_pos = old_positions[sid]
    new_pos = engine._positions[sid]
    diff = new_pos - old_pos
    
    print(f"\n   Fuente {sid}:")
    print(f"   - Posici√≥n anterior: {old_pos}")
    print(f"   - Posici√≥n nueva:    {new_pos}")
    print(f"   - Diferencia:        {diff}")
    print(f"   - Magnitud cambio:   {np.linalg.norm(diff):.6f}")
    
    # Verificar el state
    if sid in engine.motion_states:
        state_pos = engine.motion_states[sid].state.position
        print(f"   - State position:    {state_pos}")
        print(f"   - State sincronizado: {'‚úÖ' if np.allclose(state_pos, new_pos) else '‚ùå'}")

# Test manual del proceso completo
print("\nüß™ Test manual del proceso de rotaci√≥n:")
if source_ids and source_ids[0] in engine.motion_states:
    sid = source_ids[0]
    motion = engine.motion_states[sid]
    
    if 'manual_macro_rotation' in motion.active_components:
        comp = motion.active_components['manual_macro_rotation']
        
        # Estado inicial
        print(f"\n   Estado inicial:")
        print(f"   - Posici√≥n: {engine._positions[sid]}")
        print(f"   - Current yaw: {comp.current_yaw:.3f}")
        print(f"   - Target yaw: {comp.target_yaw:.3f}")
        
        # Simular varios pasos
        for i in range(5):
            # Calcular delta
            state = motion.state
            state.position = engine._positions[sid].copy()  # Asegurar sincronizaci√≥n
            
            delta = comp.calculate_delta(state, i/60.0, 1/60.0)
            
            if delta and np.linalg.norm(delta.position) > 0.0001:
                print(f"\n   Paso {i+1}:")
                print(f"   - Delta: {delta.position}")
                print(f"   - Current yaw antes: {comp.current_yaw:.3f}")
                
                # Aplicar delta manualmente
                engine._positions[sid] += delta.position
                motion.state.position = engine._positions[sid].copy()
                
                print(f"   - Nueva posici√≥n: {engine._positions[sid]}")
                print(f"   - Current yaw despu√©s: {comp.current_yaw:.3f}")
            else:
                print(f"\n   Paso {i+1}: Sin movimiento (delta muy peque√±o o None)")

# Diagn√≥stico final
print("\n" + "=" * 60)
print("üìã DIAGN√ìSTICO FINAL:")
print("-" * 40)

# Verificar m√©todo update de SourceMotion
print("\nüîç Verificando SourceMotion.update:")
if source_ids and source_ids[0] in engine.motion_states:
    motion = engine.motion_states[source_ids[0]]
    
    # Verificar si el m√©todo update existe
    if hasattr(motion, 'update'):
        print("   - M√©todo update existe: ‚úÖ")
        
        # Ver qu√© hace update
        import inspect
        update_code = inspect.getsource(motion.update)
        if "active_components" in update_code:
            print("   - update procesa active_components: ‚úÖ")
        else:
            print("   - update NO procesa active_components: ‚ùå")
    else:
        print("   - M√©todo update NO existe: ‚ùå")

print("\nüí° Posibles problemas:")
print("   1. El componente no se est√° agregando correctamente")
print("   2. El delta no se est√° calculando")
print("   3. El engine.update() no est√° aplicando deltas")
print("   4. Hay un problema con la sincronizaci√≥n de states")