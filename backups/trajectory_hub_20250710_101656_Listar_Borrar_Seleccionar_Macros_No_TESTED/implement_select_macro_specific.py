#!/usr/bin/env python3
"""
üîß Implementa select_macro() despu√©s de list_macros()
‚ö° Inserta despu√©s de l√≠nea 464, antes de _apply_formation
üéØ Impacto: BAJO - Solo b√∫squeda
"""

import os
import datetime

def implement_select_macro():
    """Implementa select_macro en la posici√≥n correcta"""
    
    print("üîß IMPLEMENTANDO select_macro()")
    print("=" * 60)
    
    engine_path = 'trajectory_hub/core/enhanced_trajectory_engine.py'
    
    # Backup
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{engine_path}.backup_before_select_macro_{timestamp}"
    os.system(f"cp '{engine_path}' '{backup_path}'")
    print(f"‚úÖ Backup: {backup_path}")
    
    # Leer archivo
    with open(engine_path, 'r') as f:
        lines = f.readlines()
    
    # Verificar que no existe
    content = ''.join(lines)
    if 'def select_macro' in content:
        print("‚ö†Ô∏è select_macro ya existe")
        return False
    
    # C√≥digo a insertar
    select_macro_code = '''    def select_macro(self, identifier):
        """Selecciona un macro por nombre o ID
        
        Args:
            identifier: Puede ser:
                - ID completo (macro_0_nombre)
                - Nombre parcial (nombre)
                - √çndice del macro (0, 1, 2...)
            
        Returns:
            dict: Informaci√≥n del macro o None si no se encuentra
        """
        if not self._macros:
            return None
        
        # Buscar por ID exacto
        if identifier in self._macros:
            macro = self._macros[identifier]
            return {
                'key': identifier,
                'macro': macro,
                'source_ids': list(macro.source_ids) if hasattr(macro, 'source_ids') else [],
                'num_sources': len(macro.source_ids) if hasattr(macro, 'source_ids') else 0,
                'behavior': macro.behavior_name if hasattr(macro, 'behavior_name') else 'unknown'
            }
        
        # Buscar por √≠ndice si es n√∫mero
        if isinstance(identifier, int) or (isinstance(identifier, str) and identifier.isdigit()):
            idx = int(identifier)
            macro_keys = list(self._macros.keys())
            if 0 <= idx < len(macro_keys):
                key = macro_keys[idx]
                return self.select_macro(key)  # Recursi√≥n para reusar l√≥gica
        
        # Buscar por nombre parcial (case insensitive)
        identifier_lower = str(identifier).lower()
        
        # Primero buscar coincidencia exacta en el nombre
        for macro_id, macro in self._macros.items():
            # Extraer nombre del formato macro_N_nombre
            parts = macro_id.split('_', 2)
            macro_name = parts[2] if len(parts) > 2 else macro_id
            
            if macro_name.lower() == identifier_lower:
                return self.select_macro(macro_id)
        
        # Luego buscar coincidencia parcial
        for macro_id, macro in self._macros.items():
            if identifier_lower in macro_id.lower():
                return self.select_macro(macro_id)
        
        return None

'''
    
    # Insertar despu√©s de l√≠nea 464
    # Verificar si necesitamos a√±adir l√≠nea en blanco
    insert_pos = 464
    if insert_pos < len(lines) and lines[insert_pos].strip() != '':
        lines.insert(insert_pos, '\n')
        insert_pos += 1
    
    lines.insert(insert_pos, select_macro_code)
    
    # Guardar
    with open(engine_path, 'w') as f:
        f.writelines(lines)
    
    print("‚úÖ select_macro() insertado despu√©s de list_macros()")
    
    # Verificar sintaxis
    print("\nüîç Verificando sintaxis...")
    result = os.system(f"python -m py_compile '{engine_path}' 2>&1")
    
    if result == 0:
        print("‚úÖ Sintaxis correcta")
        
        # Test
        print("\nüß™ Probando select_macro()...")
        try:
            from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine
            engine = EnhancedTrajectoryEngine()
            engine.start()
            
            # Crear varios macros
            engine.create_macro("test_circle", 3, formation="circle")
            engine.create_macro("test_line", 2, formation="line")
            
            # Test 1: B√∫squeda por nombre parcial
            result1 = engine.select_macro("circle")
            print(f"   B√∫squeda 'circle': {'‚úÖ' if result1 else '‚ùå'}")
            if result1:
                print(f"      Encontrado: {result1['key']}")
            
            # Test 2: B√∫squeda por √≠ndice
            result2 = engine.select_macro(0)
            print(f"   B√∫squeda por √≠ndice 0: {'‚úÖ' if result2 else '‚ùå'}")
            
            # Test 3: B√∫squeda por ID completo
            if result1:
                result3 = engine.select_macro(result1['key'])
                print(f"   B√∫squeda por ID completo: {'‚úÖ' if result3 else '‚ùå'}")
            
            # Test 4: B√∫squeda no existente
            result4 = engine.select_macro("no_existe")
            print(f"   B√∫squeda inexistente: {'‚úÖ' if not result4 else '‚ùå'}")
            
            engine.stop()
            
            print("\n‚úÖ IMPLEMENTACI√ìN EXITOSA")
            return True
            
        except Exception as e:
            print(f"‚ùå Error en test: {e}")
            import traceback
            traceback.print_exc()
            print("\nüîÑ Restaurando backup...")
            os.system(f"cp '{backup_path}' '{engine_path}'")
            return False
    else:
        print("‚ùå Error de sintaxis")
        print("üîÑ Restaurando backup...")
        os.system(f"cp '{backup_path}' '{engine_path}'")
        return False

if __name__ == "__main__":
    if implement_select_macro():
        print("\nüéØ select_macro() implementado correctamente")
        print("üìã Siguiente paso: Implementar delete_macro()")
    else:
        print("\n‚ö†Ô∏è Revisar errores")