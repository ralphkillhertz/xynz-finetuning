#!/usr/bin/env python3
"""
üîç Diagn√≥stico completo del Interactive Controller
‚ö° Analiza estructura, men√∫s y m√©todos existentes
"""

def diagnose_controller():
    """Diagn√≥stico completo del controller"""
    
    print("üîç DIAGN√ìSTICO DE INTERACTIVE CONTROLLER")
    print("=" * 60)
    
    controller_path = 'trajectory_hub/interface/interactive_controller.py'
    
    with open(controller_path, 'r') as f:
        content = f.read()
        lines = content.split('\n')
    
    # 1. Analizar men√∫ principal
    print("\nüìã MEN√ö PRINCIPAL:")
    in_main_menu = False
    menu_options = {}
    menu_section_start = -1
    
    for i, line in enumerate(lines):
        if 'def show_main_menu' in line:
            in_main_menu = True
            menu_section_start = i
        elif in_main_menu and 'options = {' in line:
            # Comenzar a capturar opciones
            j = i + 1
            while j < len(lines) and '}' not in lines[j]:
                if '"' in lines[j] and '":' in lines[j]:
                    parts = lines[j].split('"')
                    if len(parts) >= 4:
                        num = parts[1]
                        desc = parts[3]
                        menu_options[num] = desc
                        print(f"   {num}. {desc}")
                j += 1
            in_main_menu = False
    
    # 2. Buscar m√©todos relacionados con macros
    print("\nüîç M√âTODOS RELACIONADOS CON MACROS:")
    macro_methods = []
    show_methods = []
    
    for i, line in enumerate(lines):
        if 'def ' in line:
            if 'macro' in line.lower():
                method_name = line.strip().split('(')[0].replace('def ', '')
                macro_methods.append((i+1, method_name))
            elif 'show_' in line:
                method_name = line.strip().split('(')[0].replace('def ', '')
                show_methods.append((i+1, method_name))
    
    if macro_methods:
        for line_num, method in macro_methods[:10]:
            print(f"   L√≠nea {line_num}: {method}()")
    else:
        print("   ‚ùå No hay m√©todos con 'macro' en el nombre")
    
    # 3. Analizar estructura de cases en el men√∫
    print("\nüîç ESTRUCTURA DE CASES:")
    case_structure = []
    
    for i, line in enumerate(lines):
        if 'elif choice ==' in line and '"' in line:
            choice_num = line.split('"')[1]
            # Ver qu√© hace
            next_line = lines[i+1].strip() if i+1 < len(lines) else ""
            case_structure.append((choice_num, next_line))
    
    for choice, action in case_structure:
        print(f"   Opci√≥n {choice}: {action}")
    
    # 4. Buscar si ya hay alg√∫n tipo de gesti√≥n
    print("\nüîç GESTI√ìN EXISTENTE:")
    keywords = ['list_macro', 'delete_macro', 'select_macro', 'manage_macro']
    found_management = []
    
    for keyword in keywords:
        if keyword in content:
            found_management.append(keyword)
    
    if found_management:
        print(f"   ‚úÖ Encontrado: {', '.join(found_management)}")
    else:
        print("   ‚ùå No se encontr√≥ gesti√≥n de macros")
    
    # 5. Analizar m√©todos show_*
    print("\nüìã M√âTODOS DE VISUALIZACI√ìN (show_*):")
    for line_num, method in show_methods[:10]:
        print(f"   L√≠nea {line_num}: {method}()")
    
    # 6. Buscar √∫ltima l√≠nea de la clase
    class_end = -1
    for i in range(len(lines)-1, 0, -1):
        if 'if __name__ == "__main__"' in lines[i]:
            class_end = i
            break
    
    print(f"\nüìç INFORMACI√ìN ESTRUCTURAL:")
    print(f"   Total l√≠neas: {len(lines)}")
    print(f"   Men√∫ principal en l√≠nea: {menu_section_start + 1}")
    print(f"   √öltima opci√≥n del men√∫: {max(menu_options.keys()) if menu_options else 0}")
    print(f"   Final de la clase: l√≠nea {class_end}")
    
    # 7. Verificar si el engine est√° accesible
    has_engine = 'self.engine' in content
    has_list_macros = 'self.engine.list_macros' in content
    
    print(f"\nüîß INTEGRACI√ìN CON ENGINE:")
    print(f"   self.engine disponible: {'‚úÖ' if has_engine else '‚ùå'}")
    print(f"   Usa list_macros(): {'‚úÖ' if has_list_macros else '‚ùå'}")
    
    return {
        'menu_options': menu_options,
        'last_option': max(menu_options.keys()) if menu_options else "0",
        'has_macro_management': len(found_management) > 0,
        'show_methods_count': len(show_methods),
        'class_ends_at': class_end,
        'menu_starts_at': menu_section_start
    }

if __name__ == "__main__":
    result = diagnose_controller()
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN DEL DIAGN√ìSTICO:")
    print(f"   Opciones en men√∫: {len(result['menu_options'])}")
    print(f"   √öltima opci√≥n: {result['last_option']}")
    print(f"   Gesti√≥n de macros: {'‚úÖ S√ç' if result['has_macro_management'] else '‚ùå NO'}")
    print(f"   M√©todos show_*: {result['show_methods_count']}")
    
    if not result['has_macro_management']:
        print(f"\nüéØ RECOMENDACI√ìN:")
        print(f"   A√±adir opci√≥n '{int(result['last_option'])+1}' al men√∫")
        print(f"   Insertar m√©todo show_macro_management()")
        print(f"   Ubicaci√≥n: antes de l√≠nea {result['class_ends_at']}")