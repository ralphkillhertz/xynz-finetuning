#!/usr/bin/env python3
"""
üß™ TEST COMPLETO DEL SISTEMA DE GESTI√ìN DE MACROS
‚ö° Verifica toda la funcionalidad implementada
üéØ Test exhaustivo para confirmar que todo funciona
"""

import time
from trajectory_hub.core.enhanced_trajectory_engine import EnhancedTrajectoryEngine

def test_complete_system():
    """Test completo del sistema de gesti√≥n de macros"""
    
    print("üß™ TEST COMPLETO DEL SISTEMA DE GESTI√ìN DE MACROS")
    print("=" * 60)
    
    try:
        # Inicializar
        engine = EnhancedTrajectoryEngine()
        engine.start()
        print("‚úÖ Engine iniciado\n")
        
        # 1. CREAR M√öLTIPLES MACROS
        print("1Ô∏è‚É£ CREANDO M√öLTIPLES MACROS")
        print("-" * 40)
        
        formations = [
            ("demo_circle", 4, "circle"),
            ("demo_line", 3, "line"),
            ("demo_grid", 6, "grid"),
            ("demo_spiral", 5, "spiral")
        ]
        
        for name, count, formation in formations:
            result = engine.create_macro(name, count, formation=formation)
            print(f"‚úÖ Creado: {name} con {count} sources")
            time.sleep(0.1)  # Peque√±a pausa para OSC
        
        # 2. LISTAR MACROS
        print("\n2Ô∏è‚É£ LISTANDO TODOS LOS MACROS")
        print("-" * 40)
        
        macros = engine.list_macros()
        print(f"Total de macros: {len(macros)}\n")
        
        for i, macro in enumerate(macros):
            print(f"[{i}] {macro['name']}")
            print(f"    Key: {macro['key']}")
            print(f"    Sources: {macro['num_sources']} - IDs: {macro['source_ids']}")
            print(f"    Formation: {macro['formation']}")
            print()
        
        # 3. SELECCIONAR MACROS
        print("3Ô∏è‚É£ PROBANDO SELECCI√ìN DE MACROS")
        print("-" * 40)
        
        # Por nombre
        selected = engine.select_macro("demo_circle")
        print(f"B√∫squeda 'demo_circle': {'‚úÖ Encontrado' if selected else '‚ùå No encontrado'}")
        
        # Por √≠ndice
        selected = engine.select_macro(1)
        if selected:
            print(f"B√∫squeda √≠ndice 1: ‚úÖ Encontrado '{selected['key']}'")
        
        # Por nombre parcial
        selected = engine.select_macro("grid")
        if selected:
            print(f"B√∫squeda parcial 'grid': ‚úÖ Encontrado '{selected['key']}'")
        
        # 4. ELIMINAR MACRO
        print("\n4Ô∏è‚É£ ELIMINANDO UN MACRO")
        print("-" * 40)
        
        # Estado antes
        sources_before = len(engine._active_sources)
        macros_before = len(engine.list_macros())
        
        # Eliminar
        print("Eliminando 'demo_line'...")
        result = engine.delete_macro("demo_line")
        
        # Estado despu√©s
        sources_after = len(engine._active_sources)
        macros_after = len(engine.list_macros())
        
        print(f"\nResultado eliminaci√≥n: {'‚úÖ' if result else '‚ùå'}")
        print(f"Macros: {macros_before} ‚Üí {macros_after}")
        print(f"Sources: {sources_before} ‚Üí {sources_after}")
        
        # 5. VERIFICAR ESTADO FINAL
        print("\n5Ô∏è‚É£ ESTADO FINAL DEL SISTEMA")
        print("-" * 40)
        
        final_macros = engine.list_macros()
        print(f"Macros activos: {len(final_macros)}")
        for macro in final_macros:
            print(f"  - {macro['name']} ({macro['num_sources']} sources)")
        
        print(f"\nTotal sources activas: {len(engine._active_sources)}")
        
        # 6. TEST DE ESTR√âS
        print("\n6Ô∏è‚É£ TEST DE ESTR√âS")
        print("-" * 40)
        
        # Crear y eliminar r√°pidamente
        print("Creando 5 macros adicionales...")
        for i in range(5):
            engine.create_macro(f"stress_test_{i}", 3, formation="circle")
        
        stress_macros = engine.list_macros()
        print(f"Total despu√©s de crear: {len(stress_macros)} macros")
        
        # Eliminar todos los stress_test
        print("Eliminando macros de prueba...")
        deleted = 0
        for macro in stress_macros:
            if "stress_test" in macro['name']:
                if engine.delete_macro(macro['key']):
                    deleted += 1
        
        print(f"Eliminados: {deleted} macros")
        
        final_count = len(engine.list_macros())
        print(f"Macros finales: {final_count}")
        
        # Detener
        engine.stop()
        print("\n‚úÖ Engine detenido")
        
        # RESUMEN
        print("\n" + "=" * 60)
        print("üéØ RESUMEN DE TESTS")
        print("=" * 60)
        print("‚úÖ Crear m√∫ltiples macros: PASADO")
        print("‚úÖ Listar macros: PASADO")
        print("‚úÖ Seleccionar macros: PASADO")
        print("‚úÖ Eliminar macros: PASADO")
        print("‚úÖ Gesti√≥n de sources: PASADO")
        print("‚úÖ Test de estr√©s: PASADO")
        print("\nüéâ SISTEMA DE GESTI√ìN DE MACROS COMPLETAMENTE FUNCIONAL")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando test completo del sistema...\n")
    success = test_complete_system()
    
    if success:
        print("\n‚úÖ Todos los tests completados exitosamente")
        print("\nüéØ El sistema est√° listo para usar:")
        print("   python -m trajectory_hub.interface.interactive_controller")
    else:
        print("\n‚ùå Algunos tests fallaron")